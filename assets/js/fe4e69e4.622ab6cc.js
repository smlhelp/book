"use strict";(self.webpackChunksmlhelp=self.webpackChunksmlhelp||[]).push([[8357],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>c});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function m(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?m(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):m(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},m=Object.keys(e);for(n=0;n<m.length;n++)a=m[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(n=0;n<m.length;n++)a=m[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),i=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},o=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},N={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,m=e.originalType,l=e.parentName,o=r(e,["components","mdxType","originalType","parentName"]),k=i(a),c=s,d=k["".concat(l,".").concat(c)]||k[c]||N[c]||m;return a?n.createElement(d,p(p({ref:t},o),{},{components:a})):n.createElement(d,p({ref:t},o))}));function c(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var m=a.length,p=new Array(m);p[0]=k;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:s,p[1]=r;for(var i=2;i<m;i++)p[i]=a[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},7563:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>N,frontMatter:()=>m,metadata:()=>r,toc:()=>i});var n=a(7462),s=(a(7294),a(3905));const m={},p="Productivity and Coinduction",r={unversionedId:"concepts/lazy/coinduction",id:"concepts/lazy/coinduction",title:"Productivity and Coinduction",description:"By Thea Brick, April 2023",source:"@site/docs/concepts/lazy/coinduction.md",sourceDirName:"concepts/lazy",slug:"/concepts/lazy/coinduction",permalink:"/book/docs/concepts/lazy/coinduction",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Lazy Evaluation",permalink:"/book/docs/concepts/lazy/"},next:{title:"Imperative Programming",permalink:"/book/docs/concepts/imperative"}},l={},i=[{value:"Lazy Filtering Problems",id:"lazy-filtering-problems",level:2},{value:"Productivity",id:"productivity",level:2},{value:"Coinduction and Corecursion",id:"coinduction-and-corecursion",level:2},{value:"Proving Productivity",id:"proving-productivity",level:2}],o={toc:i};function N(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"productivity-and-coinduction"},"Productivity and Coinduction"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"By Thea Brick, April 2023")),(0,s.kt)("p",null,"With lazy programming we've seen how we can encode infinite data structures into\nSML. With these new structures, we'd like to be able to safely use them and\nprove things about them, but as we will see, there are some interesting quirks\nthat we must address to do so."),(0,s.kt)("h2",{id:"lazy-filtering-problems"},"Lazy Filtering Problems"),(0,s.kt)("p",null,"In the past section we've looked at ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"s, defined as (with some\nexamples):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sml"},"datatype 'a lazylist = Nil | Cons of 'a * (unit -> 'a lazylist)\n\n(* some helper functions for making lazylists *)\nfun gen_zeros () = Cons(0, gen_zeros)\nfun gen_nats x   = Cons(x, fn () => gen_nats (x + 1))\n\nval onefifty = Cons(1, fn () => Cons (5, fn () => Cons (0, fn () => Nil)))\nval zeros = gen_zero () (* infinite lazylist of zeros *)\nval nats  = gen_nats 0  (* infinite lazylist of all natural numbers *)\n")),(0,s.kt)("p",null,"Now that we've seen how to construct these ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"s we might want to try to\nwrite some higher order functions, just as we might have for ",(0,s.kt)("inlineCode",{parentName:"p"},"list"),"s. For\ninstance, here is an implementation of ",(0,s.kt)("inlineCode",{parentName:"p"},"filter")," for ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"s."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sml"},"fun lazyFilter (p : 'a -> bool) (Nil : 'a lazylist) = Nil\n  | lazyFilter p (Cons (x, xs)) =\n      if p x\n      then Cons (x, fn () => lazyFilter p (xs ()))\n      else lazyFilter p (xs ())\n")),(0,s.kt)("p",null,"This is great, now we can filter potentially infinite lists. Except, now we've\nencountered an issue. What if our filter doesn't accept anything?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sml"},"val Nil = lazyFilter (fn _ => false) onefifty\nval  ?  = lazyFilter (fn _ => false) zeros\n")),(0,s.kt)("p",null,"Filtering ",(0,s.kt)("inlineCode",{parentName:"p"},"onefifty")," turns out to be fine, we eventually run out of elements and\nsimply evaluate to ",(0,s.kt)("inlineCode",{parentName:"p"},"Nil"),". Filtering ",(0,s.kt)("inlineCode",{parentName:"p"},"zeros")," is where things become problematic.\nOur filter function will keep searching for an element that satisfies ",(0,s.kt)("inlineCode",{parentName:"p"},"p")," (which\ndoesn't exist), but since ",(0,s.kt)("inlineCode",{parentName:"p"},"zeros")," is infinite, this process will never stop, and\nour function will loop forever! And if that wasn't bad enough, we can do other\nweird things:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sml"},"val lessThan5 = lazyFilter (fn x => x < 5) nats\n")),(0,s.kt)("p",null,"This evaluates to a value rather than looping forever, but we aren't out of\ntrouble yet. If we try and look at the element after ",(0,s.kt)("inlineCode",{parentName:"p"},"4")," in ",(0,s.kt)("inlineCode",{parentName:"p"},"lessThan5"),", then we\nsuddenly loop forever again (as we cannot find any element satisfying the\npredicate)."),(0,s.kt)("h2",{id:"productivity"},"Productivity"),(0,s.kt)("p",null,"Ideally, we don't want our functions to (seemingly) randomly loop forever on\nsome ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist")," inputs. So how do we ensure that this won't be an issue? The\nanswer is to introduce the idea of productivity."),(0,s.kt)("p",null,"We say that a ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"L")," is productive if ",(0,s.kt)("inlineCode",{parentName:"p"},"L")," evaluates to either:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Nil"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Cons (x, L')")," where ",(0,s.kt)("inlineCode",{parentName:"li"},"L' ()")," is productive (for some ",(0,s.kt)("inlineCode",{parentName:"li"},"x"),").")),(0,s.kt)("p",null,"Essentially, we are guaranteeing that ",(0,s.kt)("inlineCode",{parentName:"p"},"L")," and any sub-",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"s don't loop\nforever (or raise exceptions) when we try to look at their elements. This is\ngreat, now we can start requiring that inputs to our functions give productive\n",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"s and that our functions output productive ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"s."),(0,s.kt)("p",null,"But how do we know that some ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist")," is productive? We can see that\n",(0,s.kt)("inlineCode",{parentName:"p"},"onefifty")," is productive, since ",(0,s.kt)("inlineCode",{parentName:"p"},"Nil")," is productive, meaning\n",(0,s.kt)("inlineCode",{parentName:"p"},"Cons (0, fn () => Nil)")," is productive, and so on. How do we know that ",(0,s.kt)("inlineCode",{parentName:"p"},"zeros"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"nats")," are both productive? We can inspect them and maybe judge that they\nshould be productive, but this is prone to errors and isn't really rigorous.\nInstead we should prove that they productive."),(0,s.kt)("p",null,"Our first attempt at this might be to use induction. We set ",(0,s.kt)("inlineCode",{parentName:"p"},"Nil")," as our base\ncase, and our inductive case would be ",(0,s.kt)("inlineCode",{parentName:"p"},"Cons (x, L')")," for some values ",(0,s.kt)("inlineCode",{parentName:"p"},"x"),", and\n",(0,s.kt)("inlineCode",{parentName:"p"},"L'"),". Our inductive hypothesis would be that the ",(0,s.kt)("inlineCode",{parentName:"p"},"L' ()")," is productive. This may\nappear fine at first, but consider a ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist")," like ",(0,s.kt)("inlineCode",{parentName:"p"},"nats"),": there's no base\ncase in sight (or we have to go through an infinite number of ",(0,s.kt)("inlineCode",{parentName:"p"},"Cons"),"'s to get\nto one)!"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If the problem with using induction here isn't the clearest, that's okay!\nConsider a simpler example: the natural numbers but extended with an infinite\nelement ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u221e")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\infin")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u221e")))))," (meaning 'zero' with an infinite number of successors,\n\"",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"+ 1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"+"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"))))),"\"'s, applied to it). We'll call these numbers co-natural numbers."),(0,s.kt)("p",{parentName:"blockquote"},"Let's try and prove the claim \"All co-natural numbers are finite\" by\ninduction. Well, 0 is clearly finite, and if n is finite, then n + 1 is also\nfinite. QED. This is a great induction proof, but hopefully you can see the\nproblem, we haven't considered ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u221e")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\infin")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u221e")))))," at all. This is why our traditional\ninduction falls short on infinite datatypes, like ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),".")),(0,s.kt)("h2",{id:"coinduction-and-corecursion"},"Coinduction and Corecursion"),(0,s.kt)("p",null,"Induction relies on constructing an object by looking at the basic building\nblock(s) that the input could be, the base case(s), and building them upwards,\nthe inductive case(s). For instance, a list has the basic building blocks of\n",(0,s.kt)("inlineCode",{parentName:"p"},"[]")," and can build upwards using ",(0,s.kt)("inlineCode",{parentName:"p"},"::"),". So when we write a proof using we have a\nbase case of ",(0,s.kt)("inlineCode",{parentName:"p"},"[]")," and an inductive case of ",(0,s.kt)("inlineCode",{parentName:"p"},"::"),". Similarly, when we are writing\na function that recurses over an input list, we pattern match on the list into\nthe two possible constructors."),(0,s.kt)("p",null,'Coinduction is the opposite of this (that\'s what the "co-" prefix means).\nInstead of considering how we construct the inputs to a function, we instead\nconsider how we deconstruct the outputs. Another way to think of it\nis we have an observation of the state of the object and we describe how we\ncould "change" the object for future states.'),(0,s.kt)("p",null,"Let's make this notion of destruction more clear for ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"s. For\nsimplicity, let's only worry about infinite ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"s since that is what we\nare interested in studying anyway (so no need to worry about the ",(0,s.kt)("inlineCode",{parentName:"p"},"Nil")," case):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sml"},"fun head (Nil : 'a lazylist) : 'a = raise Fail \"Unimplemented\"\n  | head (Cons (x, _)) = x\n\nfun tail (Nil : 'a lazylist) : 'a lazylist = raise Fail \"Unimplemented\"\n  | tail (Cons (_, xs)) = xs ()\n")),(0,s.kt)("p",null,"Our function ",(0,s.kt)("inlineCode",{parentName:"p"},"head")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"tail")," defines two ways to deconstruct a ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist")," (or\nif you prefer, two ways to get to a future state). The ",(0,s.kt)("inlineCode",{parentName:"p"},"head")," deconstructor (or\nco-constructor) evaluates to the head of the ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist")," (if it exists).\nLikewise, the ",(0,s.kt)("inlineCode",{parentName:"p"},"tail")," produces the next ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"."),(0,s.kt)("p",null,"Now let's rewrite our ",(0,s.kt)("inlineCode",{parentName:"p"},"lazyFilter")," explicitly using these deconstructors:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sml"},"(* REQUIRES: `ll` is an infinite lazylist *)\nfun lazyFilter' (p : 'a -> bool) (ll : 'a lazylist) : 'a lazylist =\n  let\n    val x = head ll\n  in\n    if p x then\n      Cons (x, fn () =>\n        (* This is only evaluated if someone called tail on the\n         * outer lazylist: `Cons (x, fn () => ...) *)\n        lazyFilter' p (tail ll)\n      )\n    else lazyFilter' p (tail ll)\n")),(0,s.kt)("p",null,"Notice that our function is defining what it should do in terms of the\noutput deconstructors ",(0,s.kt)("inlineCode",{parentName:"p"},"head")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"tail"),". We don't case on the input to the\nfunction, we are casing on the output behaviour. Specifically, it defines that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"head (lazyFilter' p ll)")," evaluates to ",(0,s.kt)("inlineCode",{parentName:"li"},"x")," where ",(0,s.kt)("inlineCode",{parentName:"li"},"p x")," is true"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tail (lazyFilter' p ll)")," evaluates to ",(0,s.kt)("inlineCode",{parentName:"li"},"ll'")," where ",(0,s.kt)("inlineCode",{parentName:"li"},"ll'")," is the filtered\n",(0,s.kt)("inlineCode",{parentName:"li"},"tail")," of ",(0,s.kt)("inlineCode",{parentName:"li"},"ll")," according to ",(0,s.kt)("inlineCode",{parentName:"li"},"p"),".")),(0,s.kt)("p",null,"You might notice a parallel in this definition to what we've seen before.\nSpecifically, it seems like ",(0,s.kt)("inlineCode",{parentName:"p"},"head (...)")," is our base case, and ",(0,s.kt)("inlineCode",{parentName:"p"},"tail (...)")," is\nour inductive case, with an inductive hypothesis of ",(0,s.kt)("inlineCode",{parentName:"p"},"ll'"),". Except since we are\ndoing coinduction, it is instead a coinductive case and a coinductive\nhypothesis."),(0,s.kt)("h2",{id:"proving-productivity"},"Proving Productivity"),(0,s.kt)("p",null,"Now that we've at least established what coinduction is, let's use it to prove\nproductivity! For this example, we'll consider the following function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sml"},"(* REQUIRES: `ll` is an infinite lazylist *)\nfun lazymap (f : 'a -> 'b) (ll : 'a lazylist) : 'b lazylist =\n  let\n    val hd = head ll\n  in\n    Cons (f hd, fn () => lazymap f (tail ll))\n  end\n")),(0,s.kt)("p",null,"The theorem we want to show is as follows:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Theorem:")," For all types ",(0,s.kt)("inlineCode",{parentName:"p"},"t1"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"t2"),", for all infinite ",(0,s.kt)("inlineCode",{parentName:"p"},"ll : t1 lazylist")," that\nare values, and for all total function values ",(0,s.kt)("inlineCode",{parentName:"p"},"f : t1 -> t2"),",\n",(0,s.kt)("inlineCode",{parentName:"p"},"lazymap f ll")," evaluates to a value ",(0,s.kt)("inlineCode",{parentName:"p"},"LL")," where ",(0,s.kt)("inlineCode",{parentName:"p"},"LL")," is productive."),(0,s.kt)("p",null,"Remember, for a ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist")," to be productive it must evaluate to either ",(0,s.kt)("inlineCode",{parentName:"p"},"Nil")," or\n",(0,s.kt)("inlineCode",{parentName:"p"},"Cons (x, ll')")," where ",(0,s.kt)("inlineCode",{parentName:"p"},"ll' ()")," is productive (where ",(0,s.kt)("inlineCode",{parentName:"p"},"x")," is the leading element\nin the ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"). Since we are only considering infinite lists we don't need\nto worry about the ",(0,s.kt)("inlineCode",{parentName:"p"},"Nil")," case."),(0,s.kt)("p",null,"Using our deconstructors, we can rewrite our notion of productivity to say that\na ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist")," ",(0,s.kt)("inlineCode",{parentName:"p"},"ll")," is productive if ",(0,s.kt)("inlineCode",{parentName:"p"},"head ll")," evaluates to ",(0,s.kt)("inlineCode",{parentName:"p"},"x")," (for some ",(0,s.kt)("inlineCode",{parentName:"p"},"x"),") and\n",(0,s.kt)("inlineCode",{parentName:"p"},"tail ll")," evalautes to a productive lazylist."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Proof:")," Fix ",(0,s.kt)("inlineCode",{parentName:"p"},"t1"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"t2")," to be types and ",(0,s.kt)("inlineCode",{parentName:"p"},"f : t1 -> t2")," to be a total function\nvalue. We proceed by co-induction on ",(0,s.kt)("inlineCode",{parentName:"p"},"ll"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Co-IH"),": ",(0,s.kt)("inlineCode",{parentName:"p"},"lazymap f (tail ll)")," is a productive ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"WTS"),": ",(0,s.kt)("inlineCode",{parentName:"p"},"lazymap f ll")," is a productive ",(0,s.kt)("inlineCode",{parentName:"p"},"lazylist"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Showing"),":"),(0,s.kt)("div",{className:"math math-display"},(0,s.kt)("span",{parentName:"div",className:"katex-display"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mtable",{parentName:"semantics",rowspacing:"0.25em",columnalign:"right left right left right left right left",columnspacing:"0em 1em 0em 1em 0em 1em 0em"},(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mrow",{parentName:"mrow"},(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"lazymap"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"f"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"ll"))))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mspace",{parentName:"mrow",width:"2.8453em"})))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"})))),(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mo",{parentName:"mrow"},"\u27f9"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mrow",{parentName:"mrow"},(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"let"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"val"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"hd"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"="),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"head"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"ll"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"in"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"..."),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"end"))))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mtext",{parentName:"mrow"},"clause\xa01\xa0of\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"lazymap"))))),(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mo",{parentName:"mrow"},"\u27f9"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mrow",{parentName:"mrow"},(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"let"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"val"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"hd"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"="),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"y"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"in"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"..."),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"end"))))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"ll"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0is\xa0infinite"))))),(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mo",{parentName:"mrow"},"\u27f9"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mrow",{parentName:"mrow"},(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"Cons"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"(f"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"y,"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"fn"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"()"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"=>"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"lazymap"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"f"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"(tail"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"ll))"))))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"})))),(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mo",{parentName:"mrow"},"\u27f9"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mrow",{parentName:"mrow"},(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"Cons"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"(x,"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"fn"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"()"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"=>"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"lazymap"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"f"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"(tail"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"ll))"))))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"f"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0total,\xa0"),(0,s.kt)("mrow",{parentName:"mrow"},(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"f"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"y")),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0evaluates\xa0to\xa0value\xa0"),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"x"))))),(0,s.kt)("mtr",{parentName:"mtable"},(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mo",{parentName:"mrow"},"\u27f9"),(0,s.kt)("mtext",{parentName:"mrow"},"\xa0")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"},(0,s.kt)("mrow",{parentName:"mrow"}),(0,s.kt)("mtext",{parentName:"mrow",mathvariant:"monospace"},"LL")))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mrow",{parentName:"mstyle"}))),(0,s.kt)("mtd",{parentName:"mtr"},(0,s.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"true"},(0,s.kt)("mtext",{parentName:"mstyle"},"is\xa0a\xa0syntactic\xa0value"))))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\begin{aligned} & \\texttt{lazymap f ll} && \\hspace{1cm} &&& \\\\ \\Longrightarrow\\ & \\texttt{let val hd = head ll in ... end} && &&&\\text{clause 1 of \\texttt{lazymap}} \\\\ \\Longrightarrow\\ & \\texttt{let val hd = y in ... end} && &&&\\text{\\texttt{ll} is infinite} \\\\ \\Longrightarrow\\ & \\texttt{Cons (f y, fn () => lazymap f (tail ll))} & && &&& \\\\ \\Longrightarrow\\ & \\texttt{Cons (x, fn () => lazymap f (tail ll))} & && &&\\text{\\texttt{f} total, \\texttt{f y} evaluates to value \\texttt{x}} \\\\ \\Longrightarrow\\ & \\texttt{LL} & && &&\\text{is a syntactic value} \\\\ \\end{aligned}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"9em",verticalAlign:"-4.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mtable"},(0,s.kt)("span",{parentName:"span",className:"col-align-r"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.75em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-6.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-5.41em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u27f9"),(0,s.kt)("span",{parentName:"span",className:"mspace"},"\xa0"))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u27f9"),(0,s.kt)("span",{parentName:"span",className:"mspace"},"\xa0"))),(0,s.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u27f9"),(0,s.kt)("span",{parentName:"span",className:"mspace"},"\xa0"))),(0,s.kt)("span",{parentName:"span",style:{top:"-0.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u27f9"),(0,s.kt)("span",{parentName:"span",className:"mspace"},"\xa0"))),(0,s.kt)("span",{parentName:"span",style:{top:"0.59em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u27f9"),(0,s.kt)("span",{parentName:"span",className:"mspace"},"\xa0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.25em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"col-align-l"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.75em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-6.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"lazymap\xa0f\xa0ll")))),(0,s.kt)("span",{parentName:"span",style:{top:"-5.41em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"let\xa0val\xa0hd\xa0=\xa0head\xa0ll\xa0in\xa0...\xa0end")))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"let\xa0val\xa0hd\xa0=\xa0y\xa0in\xa0...\xa0end")))),(0,s.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"Cons\xa0(f\xa0y,\xa0fn\xa0()\xa0=>\xa0lazymap\xa0f\xa0(tail\xa0ll))")))),(0,s.kt)("span",{parentName:"span",style:{top:"-0.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"Cons\xa0(x,\xa0fn\xa0()\xa0=>\xa0lazymap\xa0f\xa0(tail\xa0ll))")))),(0,s.kt)("span",{parentName:"span",style:{top:"0.59em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"LL"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.25em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"1em"}}),(0,s.kt)("span",{parentName:"span",className:"col-align-r"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.75em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-6.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-5.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-3.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-2.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-0.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"0.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.25em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"col-align-l"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.75em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-6.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"2.8453em"}}))),(0,s.kt)("span",{parentName:"span",style:{top:"-5.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"-2.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"-0.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"0.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"})))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.25em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"1em"}}),(0,s.kt)("span",{parentName:"span",className:"col-align-r"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.75em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-6.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-5.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-3.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-2.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-0.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"0.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.25em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"col-align-l"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.75em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-6.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"-5.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"-2.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"-0.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"}))),(0,s.kt)("span",{parentName:"span",style:{top:"0.75em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"})))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.25em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"1em"}}),(0,s.kt)("span",{parentName:"span",className:"col-align-r"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.75em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-6.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-5.41em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord"},"clause\xa01\xa0of\xa0"),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"lazymap"))))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"ll")),(0,s.kt)("span",{parentName:"span",className:"mord"},"\xa0is\xa0infinite")))),(0,s.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"})),(0,s.kt)("span",{parentName:"span",style:{top:"-0.91em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"f")),(0,s.kt)("span",{parentName:"span",className:"mord"},"\xa0total,\xa0"),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"f\xa0y")),(0,s.kt)("span",{parentName:"span",className:"mord"},"\xa0evaluates\xa0to\xa0value\xa0"),(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord texttt"},"x"))))),(0,s.kt)("span",{parentName:"span",style:{top:"0.59em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord text"},(0,s.kt)("span",{parentName:"span",className:"mord"},"is\xa0a\xa0syntactic\xa0value"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"4.25em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"col-align-l"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.25em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.25em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"})))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.25em"}},(0,s.kt)("span",{parentName:"span"})))))))))))),(0,s.kt)("p",null,"By the Co-IH, ",(0,s.kt)("inlineCode",{parentName:"p"},"lazymap f (tail ll)")," is productive. Therefore, we have that\n",(0,s.kt)("inlineCode",{parentName:"p"},"head LL")," evaluates to a value ",(0,s.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"tail LL")," evaluates to a productive\nstream (",(0,s.kt)("inlineCode",{parentName:"p"},"lazymap f (tail ll)"),"). So, ",(0,s.kt)("inlineCode",{parentName:"p"},"lazymap f ll")," is productive!"),(0,s.kt)("p",null,"This is a weird proof, so it is understandable if you don't grasp all the\nnuisances, they aren't too important for our purposes. To try and intuit what\nthe proof is doing, we are showing that two sides simulate each other. One\nside is our ",(0,s.kt)("inlineCode",{parentName:"p"},"lazymap")," function and the other side is our productivity\ndefinition. We are showing that if we start in equivalent states and step one\nside (e.g. the ",(0,s.kt)("inlineCode",{parentName:"p"},"lazymap")," function) that we can simulate the other side (e.g. the\nproductivity definition), and vice-versa. This idea is called ",(0,s.kt)("em",{parentName:"p"},"bisimulation"),"\n(which we won't explore further) and encodes the reasoning why we don't need to\nlook at the entire stream."))}N.isMDXComponent=!0}}]);