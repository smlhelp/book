"use strict";(self.webpackChunksmlhelp=self.webpackChunksmlhelp||[]).push([[522],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return t?a.createElement(h,r(r({ref:n},u),{},{components:t})):a.createElement(h,r({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8882:(e,n,t)=>{t.d(n,{B:()=>l});var a=t(7294);const i="center_wFZg";function l(e){return a.createElement("figure",{className:i},e.figure?e.figure:a.createElement("img",{src:e.img,alt:e.alt}),a.createElement("figcaption",null,a.createElement("b",null,"Fig ",e.idx,".")," ",e.children))}},7669:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var a=t(7462),i=(t(7294),t(3905)),l=t(8882);const r=t.p+"assets/images/tabulatecost-ab93e05e4f5cfb8e9b882b6ea257e95e.png",o=t.p+"assets/images/reducecost-5cd73ab680af6783585c4b841e42bed4.png",s={sidebar_position:8},p="Sequences",u={unversionedId:"concepts/sequences",id:"concepts/sequences",title:"Sequences",description:"By Kaz Zhou, January 2021. Revised April 2021",source:"@site/docs/concepts/sequences.mdx",sourceDirName:"concepts",slug:"/concepts/sequences",permalink:"/book/docs/concepts/sequences",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"defaultSidebar",previous:{title:"Functors",permalink:"/book/docs/concepts/modules/functors"},next:{title:"Lazy Evaluation",permalink:"/book/docs/concepts/lazy"}},c={},d=[{value:"Sequences vs. Lists",id:"sequences-vs-lists",level:2},{value:"Important sequence functions",id:"important-sequence-functions",level:2},{value:"<code>Seq.nth</code>",id:"seqnth",level:3},{value:"<code>Seq.tabulate</code>",id:"seqtabulate",level:3},{value:"<code>Seq.map</code>",id:"seqmap",level:3},{value:"<code>Seq.reduce</code>",id:"seqreduce",level:3},{value:"<code>Seq.filter</code>",id:"seqfilter",level:3},{value:"<code>Seq.append</code>",id:"seqappend",level:3},{value:"Examples of functions involving sequences",id:"examples-of-functions-involving-sequences",level:2},{value:"Exercise: Pascal&#39;s triangle",id:"exercise-pascals-triangle",level:2}],m={toc:d};function h(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sequences"},"Sequences"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"By Kaz Zhou, January 2021"),". ",(0,i.kt)("em",{parentName:"p"},"Revised April 2021")),(0,i.kt)("p",null,"In programming, we often need to write fast algorithms that use enumerable collections. Currently we use the list datatype to represent enumerable collections. There are some crucial limitations of lists though."),(0,i.kt)("p",null,"A great application of SML's modules system is the sequence signature. The implementation of sequences (which is specific to 15150) allows for parallelism and accessing any element in O(1) time; it also comes with some helpful functions."),(0,i.kt)("p",null,"Similar to our notation for lists, our notation for sequences looks like ",(0,i.kt)("inlineCode",{parentName:"p"},"<x_1, x_2, x_3, ..., x_n>"),"."),(0,i.kt)("h2",{id:"sequences-vs-lists"},"Sequences vs. Lists"),(0,i.kt)("p",null,"Here are some advantages / disadvantages of sequences and lists. Considering sequences and lists purely from an algorithm-writing perspective, the only con of sequences is the slow cons operation."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Sequences"),(0,i.kt)("th",{parentName:"tr",align:null},"Lists"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Accessing element i"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(i)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Parallelism"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Pattern matching"),(0,i.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"cons operation"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n) work"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1) work")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Writing proofs"),(0,i.kt)("td",{parentName:"tr",align:null},"Difficult"),(0,i.kt)("td",{parentName:"tr",align:null},"Relatively easy")))),(0,i.kt)("h2",{id:"important-sequence-functions"},"Important sequence functions"),(0,i.kt)("p",null,"Some frequently used sequence functions are ",(0,i.kt)("inlineCode",{parentName:"p"},"nth"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"tabulate"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"filter"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"reduce"),". For a comprehensive documentation of the sequence library, see ",(0,i.kt)("a",{parentName:"p",href:"http://www.cs.cmu.edu/~15150/resources/libraries/sequence.pdf"},"http://www.cs.cmu.edu/~15150/resources/libraries/sequence.pdf"),". The following section will define each of the functions, give examples of their usage, and analyze their work and span."),(0,i.kt)("h3",{id:"seqnth"},(0,i.kt)("inlineCode",{parentName:"h3"},"Seq.nth")),(0,i.kt)("p",null,"The function ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.nth")," allows for extracting any element from a sequence in O(1) work and span. This is a significant advantage over lists, which could take up to O(n) work and span, in the case of finding the last element of the list. ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.nth")," has type ",(0,i.kt)("inlineCode",{parentName:"p"},"'a seq -> int -> 'a seq"),"."),(0,i.kt)("p",null,"An example: Let's say the sequence ",(0,i.kt)("inlineCode",{parentName:"p"},"S")," is bound to the value ",(0,i.kt)("inlineCode",{parentName:"p"},"<0, 1, 2>"),", which has type ",(0,i.kt)("inlineCode",{parentName:"p"},"int seq"),". Then,"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Seq.nth S 0")," evaluates to ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Seq.nth S 2")," evaluates to ",(0,i.kt)("inlineCode",{parentName:"li"},"2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Seq.nth S 5")," raises an exception ",(0,i.kt)("inlineCode",{parentName:"li"},"Range"),", which occurs when the index is too large or small.")),(0,i.kt)("h3",{id:"seqtabulate"},(0,i.kt)("inlineCode",{parentName:"h3"},"Seq.tabulate")),(0,i.kt)("p",null,"This is a very common tool for constructing a sequence. The type of ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.tabulate")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"(int -> 'a) -> int -> 'a seq"),". The first argument is a function which maps an index to a value, and the second argument is an integer specifying the length of the sequence. In general:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Seq.tabulate f n ==> <f 0, f 1, f 2, ..., f (n-1)>")),(0,i.kt)("p",null,"As a concrete example:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Seq.tabulate (fn i => i) 5 ==> <0, 1, 2, 3, 4>")),(0,i.kt)("p",null,"Let's try writing a function that reverses a sequence. For example,"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"reverse <0, 1, 2, 3, 4> ==> <4, 3, 2, 1, 0>")),(0,i.kt)("p",null,"This function ",(0,i.kt)("inlineCode",{parentName:"p"},"reverse")," would have type ",(0,i.kt)("inlineCode",{parentName:"p"},"'a seq -> 'a seq"),". In the above example, we have a sequence of length 5. The element at index 0 moves to index 4, the element at index 1 moves to index 3, ..., the element at index 4 moves to index 0. Generally, if the sequence has length ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", the element at index ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," should move to ",(0,i.kt)("inlineCode",{parentName:"p"},"n - i - 1"),". It's pretty easy to make off-by-one errors here, so be careful and test sequence functions thoroughly! The implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"reverse")," is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml"},"fun reverse S =\n  let\n    val n = Seq.length S\n  in\n    Seq.tabulate (fn i => Seq.nth S (n-i-1)) n\n  end\n")),(0,i.kt)("p",null,"It's also possible to write functions that deal with nested sequences. Let's write a function ",(0,i.kt)("inlineCode",{parentName:"p"},"multtable : int -> int seq seq")," that, when given a positive integer ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", makes an ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," by ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," multiplication table. For example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"multtable 5 ==>\n<<0,0,0,0,0>,\n <0,1,2,3,4>,\n <0,2,4,6,8>,\n <0,3,6,9,12>,\n <0,4,8,12,16>>\n")),(0,i.kt)("p",null,"This time, the function that we're tabulating with needs to output a sequence, like ",(0,i.kt)("inlineCode",{parentName:"p"},"<0,2,4,6,8>"),"."),(0,i.kt)("p",null,"Here is the implementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml"},"fun multtable n =\n  Seq.tabulate (fn i =>\n    Seq.tabulate (fn j => i*j) n) n\n")),(0,i.kt)("p",null,"Let's analyze the work of ",(0,i.kt)("inlineCode",{parentName:"p"},"multtable"),". The function ",(0,i.kt)("inlineCode",{parentName:"p"},"(fn i => Seq.tabulate (fn j => i*j) n)")," has ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")," work. This is since the function evaluates ",(0,i.kt)("inlineCode",{parentName:"p"},"i*j")," (for different values of ",(0,i.kt)("inlineCode",{parentName:"p"},"j"),") ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," times. The function is called ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," times (from the outer tabulate). Therefore, the total work of this function is ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n^2)"),"."),(0,i.kt)("p",null,"For the span analysis, note that the function ",(0,i.kt)("inlineCode",{parentName:"p"},"(fn i => Seq.tabulate (fn j => i*j) n)")," has ",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")," span, because ",(0,i.kt)("inlineCode",{parentName:"p"},"i*j")," is evaluated in parallel for all the different values of ",(0,i.kt)("inlineCode",{parentName:"p"},"j"),". Then, the entire function has ",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")," span because the function ",(0,i.kt)("inlineCode",{parentName:"p"},"(fn i => Seq.tabulate (fn j => i*j) n)")," is called all in parallel."),(0,i.kt)("p",null,"In general, the cost graph for ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.tabulate")," looks like this."),(0,i.kt)(l.B,{img:r,alt:"tabulate cost graph",idx:1,mdxType:"Figure"},"The cost graph for `Seq.tabulate`. Each branch at the top represents a different independent task for the processor(s) to perform."),(0,i.kt)("p",null,"The work of ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.tabulate f S")," is the sum of all costs in the graph above. The span is the maximum cost of any one of the branches, because the function is called on 0, 1, ..., n-1 in parallel."),(0,i.kt)("h3",{id:"seqmap"},(0,i.kt)("inlineCode",{parentName:"h3"},"Seq.map")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Seq.map")," is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"List.map"),". The type of ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.map")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"('a -> 'b) -> 'a seq -> 'b seq"),". Given a function ",(0,i.kt)("inlineCode",{parentName:"p"},"f : 'a -> 'b")," and a sequence ",(0,i.kt)("inlineCode",{parentName:"p"},"<x_1, x_2, x_3, ..., x_n> : 'a seq"),", we have:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Seq.map f <x_1, x_2, x_3, ..., x_n> = <f x_1, f x_2, f x_3, ..., f x_n>\n")),(0,i.kt)("p",null,"The work of evaluating the above expression is (work of doing ",(0,i.kt)("inlineCode",{parentName:"p"},"f x_1"),") + (work of doing ",(0,i.kt)("inlineCode",{parentName:"p"},"f x_2"),") + ... + (work of doing ",(0,i.kt)("inlineCode",{parentName:"p"},"f x_n"),"). The calls ",(0,i.kt)("inlineCode",{parentName:"p"},"f x_1, f x_2, f x_3, ..., f x_n")," are all done in parallel. So, the span is the max of (span of doing ",(0,i.kt)("inlineCode",{parentName:"p"},"f x_1"),", span of doing ",(0,i.kt)("inlineCode",{parentName:"p"},"f x_2"),", ..., span of doing ",(0,i.kt)("inlineCode",{parentName:"p"},"f x_n"),")."),(0,i.kt)("h3",{id:"seqreduce"},(0,i.kt)("inlineCode",{parentName:"h3"},"Seq.reduce")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce")," is like ",(0,i.kt)("inlineCode",{parentName:"p"},"List.foldr"),", but with sequences. The type is ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce : ('a * 'a -> 'a) -> 'a -> 'a seq -> 'a"),". In English, ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce"),' takes in a combining function, a base value, and a sequence to "reduce". For example, ',(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce g z <x_0, x_1, x_2, ..., x_n>")," is extensionally equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"g(x_0, g(x_1, g(x_2, ..., g(x_n, z)))... )"),". Notice that the combining function is ",(0,i.kt)("inlineCode",{parentName:"p"},"'a * 'a -> 'a")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"'a * 'b -> 'b"),", as in ",(0,i.kt)("inlineCode",{parentName:"p"},"List.foldr"),"."),(0,i.kt)("p",null,"The neat part is, ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce")," also supports parallelism. In particular, when a combining function ",(0,i.kt)("inlineCode",{parentName:"p"},"g")," has constant span, then ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce g z S")," has O(log |S|) span. We pay a slight cost: the function ",(0,i.kt)("inlineCode",{parentName:"p"},"g")," must be associative, which means that ",(0,i.kt)("inlineCode",{parentName:"p"},"g(g(a,b),c) = g(a,g(b,c))")," for all ",(0,i.kt)("inlineCode",{parentName:"p"},"a,b,c"),". Furthermore, ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," must be the identity for ",(0,i.kt)("inlineCode",{parentName:"p"},"g"),", which means ",(0,i.kt)("inlineCode",{parentName:"p"},"g(a,z) = g(z,a) = a")," for all ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,i.kt)("p",null,"To analyze the work and span, let's consider how SML actually evaluates ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce g z S"),". It first calls the combining function ",(0,i.kt)("inlineCode",{parentName:"p"},"g")," on each pair of elements: ",(0,i.kt)("inlineCode",{parentName:"p"},"x_0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"x_1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"x_2")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"x_3"),", and so on. All of these calls can be made in parallel. Then, we combine the intermediate results together. At the very end, all of the elements of ",(0,i.kt)("inlineCode",{parentName:"p"},"S")," will be combined together."),(0,i.kt)(l.B,{img:o,alt:"reduce cost graph",idx:2,mdxType:"Figure"},"The cost graph for Seq.reduce. Each branch at the top represents a different independent task for the processor(s) to perform."),(0,i.kt)("p",null,"The work is the sum of doing all the work shown in the cost graph, while the span is the longest path through the cost graph. Therefore, for constant ",(0,i.kt)("inlineCode",{parentName:"p"},"g"),", the work of ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce g z S")," is O(|S|), and the span is O(log |S|)."),(0,i.kt)("p",null,"An example of using this function is finding the sum of a sequence. So, ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce (op +) 0 <1, 2, 3, 4>")," evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"10"),"."),(0,i.kt)("h3",{id:"seqfilter"},(0,i.kt)("inlineCode",{parentName:"h3"},"Seq.filter")),(0,i.kt)("p",null,"Again, a sequence function is analogous to a list function. ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.filter")," is like ",(0,i.kt)("inlineCode",{parentName:"p"},"List.filter"),". It takes in a predicate function of type ",(0,i.kt)("inlineCode",{parentName:"p"},"'a -> bool")," and a sequence of type ",(0,i.kt)("inlineCode",{parentName:"p"},"'a seq"),", and keeps elements ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," such that ",(0,i.kt)("inlineCode",{parentName:"p"},"p x")," evaluates to true. However, ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.filter")," is optimized for parallel performance. The work is O(|S|). The span is O(log |S|), which may seem surprising as the predicate function may be applied to all elements in parallel. However, it is difficult to find out the number of elements that satisfy the predicate, and thus it's not possible to find the length of the filtered sequence in O(1). The implementation details are tricky, but use a divide-and-conquer approach just like ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.reduce"),"."),(0,i.kt)("h3",{id:"seqappend"},(0,i.kt)("inlineCode",{parentName:"h3"},"Seq.append")),(0,i.kt)("p",null,"Just like ",(0,i.kt)("inlineCode",{parentName:"p"},"@"),", the function ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.append : 'a seq * 'a seq -> 'a seq")," puts two sequences together. The work to create the appended sequence, such as in the call ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.append (S1,S2)"),", is O(|S1| + |S2|). To justify this, think about how ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.append")," may be implemented using ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.tabulate"),". The tabulating function maps indices between 0 and |S1|-1 to elements from S1, and maps indices between |S1| and |S1 + S2| - 1 to elements from S2. Additionally, the span of ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.append")," is O(1) regardless of the input sequences. This makes intuitive sense because ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.tabulate")," also has O(1) span, when given a constant tabulating function."),(0,i.kt)("h2",{id:"examples-of-functions-involving-sequences"},"Examples of functions involving sequences"),(0,i.kt)("h2",{id:"exercise-pascals-triangle"},"Exercise: Pascal's triangle"),(0,i.kt)("p",null,"Our task is to write a function ",(0,i.kt)("inlineCode",{parentName:"p"},"pascal : int -> int seq seq"),". Given a nonnegative integer ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pascal n")," evaluates to the first ",(0,i.kt)("inlineCode",{parentName:"p"},"n+1")," rows of Pascal's triangle. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"pascal 5 =\n<<1>,\n <1,1>,\n <1,2,1>,\n <1,3,3,1>,\n <1,4,6,4,1>,\n <1,5,10,10,5,1>>\n")),(0,i.kt)("p",null,"Let's try to do this task without using the formula for entries of Pascal's triangle. The 0th row of Pascal's triangle is our base case. Then, we can add elements from the (n-1)th row to calculate elements in the nth row (in parallel!). This is an incremental approach: we add one row of the answer at a time."),(0,i.kt)("p",null,"This problem has a bit of a dynamic programming flavor, in that we should remember the previous row to help calculate new rows. One issue is that using ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.append")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.cons")," to add a row to a sequence is expensive. However, remember the pros and cons of sequences vs. lists! Adding on a row to a list requires just O(1) work. Therefore, our approach for this problem will use both sequences and lists. The solution is below. Note that it uses the function ",(0,i.kt)("inlineCode",{parentName:"p"},"reverse")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Seq.tabulate")," section of this article."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml"},"fun pascalH 0 = [Seq.singleton 1]\n  | pascalH n =\n    let\n      val (prev::rest) = pascalH (n-1)\n      fun rowmaker 0 = 1\n        | rowmaker i =\n          if i = n then 1\n          else Seq.nth prev i + Seq.nth prev (i-1)\n      val new = Seq.tabulate rowmaker (n+1)\n    in\n      new::prev::rest\n    end\n\nfun pascal n = reverse (Seq.fromList (pascalH n))\n")))}h.isMDXComponent=!0}}]);