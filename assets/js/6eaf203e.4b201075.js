"use strict";(self.webpackChunksmlhelp=self.webpackChunksmlhelp||[]).push([[9733],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||l;return t?a.createElement(f,r(r({ref:n},d),{},{components:t})):a.createElement(f,r({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3459:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const l={sidebar_position:2},r="Multi-File Projects",o={unversionedId:"concepts/beyond/multi-files",id:"concepts/beyond/multi-files",title:"Multi-File Projects",description:"By Thea Brick, January 2023",source:"@site/docs/concepts/beyond/multi-files.md",sourceDirName:"concepts/beyond",slug:"/concepts/beyond/multi-files",permalink:"/book/docs/concepts/beyond/multi-files",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Records",permalink:"/book/docs/concepts/beyond/records"},next:{title:"Additional Modules Syntax",permalink:"/book/docs/concepts/beyond/more-syntax"}},s={},p=[{value:"MLB Files",id:"mlb-files",level:2},{value:"MLB Path Variables",id:"mlb-path-variables",level:3},{value:"CM Files",id:"cm-files",level:2},{value:"Anchors",id:"anchors",level:3}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"multi-file-projects"},"Multi-File Projects"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"By Thea Brick, January 2023")),(0,i.kt)("p",null,"When working with larger projects, we need a way to effectively load various SML\nfiles, sharing common libraries functions, etc. SML does not define a specific\nmethod to do this, so multiple standards have arose. The SML/NJ compiler uses CM\n(compilation manager) files and MLton uses MLB (ML basis) files. Both systems\nare used and have unique pros and cons, so we will discuss them both. That being\nsaid, each has their own associated documentation, so we will not go completely\nin depth."),(0,i.kt)("p",null,"There is also a utility called ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/T-Brick/molasses"},"Molasses"),"\nwhich can compile (most) SML programs using MLB files into SML programs using CM\nfiles, allowing MLton programs to be ran in the SML/NJ REPL."),(0,i.kt)("h2",{id:"mlb-files"},"MLB Files"),(0,i.kt)("p",null,"See the official documentation ",(0,i.kt)("a",{parentName:"p",href:"http://mlton.org/MLBasis"},"here"),"."),(0,i.kt)("p",null,"MLB files allow for the sharing of expression-level declarations, infix\ndeclarations, and structure-level declarations between SML files. It is a\nsequence of files (SML and MLB) which are loaded sequentially."),(0,i.kt)("p",null,"MLB files referenced are all merged together to form a basis, and then the SML\nfiles can build upon this basis to add additional bindings. For instance,\nconsidering the following example file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml"},"lib1.mlb\nlib2.mlb\nfile1.sml\nfile2.sml\n")),(0,i.kt)("p",null,"First ",(0,i.kt)("inlineCode",{parentName:"p"},"lib1.mlb")," is loaded and is added to a basis. Then, ",(0,i.kt)("inlineCode",{parentName:"p"},"lib2.mlb")," is loaded\nand is also added to the basis. Importantly, declarations added by ",(0,i.kt)("inlineCode",{parentName:"p"},"lib1.mlb"),"\ncannot be used in ",(0,i.kt)("inlineCode",{parentName:"p"},"lib2.mlb")," (they are considered separate libraries). The\ndeclarations in ",(0,i.kt)("inlineCode",{parentName:"p"},"lib2.mlb")," potentially shadow the declarations in ",(0,i.kt)("inlineCode",{parentName:"p"},"lib1.mlb"),"."),(0,i.kt)("p",null,"Then, ",(0,i.kt)("inlineCode",{parentName:"p"},"file1.sml")," is loaded using and expanding the basis. This means that\n",(0,i.kt)("inlineCode",{parentName:"p"},"file1.sml")," can use all the declarations in the combined ",(0,i.kt)("inlineCode",{parentName:"p"},"lib1.mlb")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"lib2.mlb"),". Finally, ",(0,i.kt)("inlineCode",{parentName:"p"},"file2.sml")," can use all the declarations defined in all the\npriorly discussed files."),(0,i.kt)("p",null,"If we want to limit what signature, structures, and functors we can see, we do\nso with a ",(0,i.kt)("inlineCode",{parentName:"p"},"local")," expression (different from the SML version). For instance,\nthis example limits the imports from ",(0,i.kt)("inlineCode",{parentName:"p"},"mlb")," files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml"},"local\n  lib1.mlb\n  lib2.mlb\nin\n  structure A\n  structure C = B (* example of renaming structure B *)\n  functor F\nend\nfile1.sml (* only structure A, C, and functor F are available *)\n")),(0,i.kt)("p",null,"Conversely, we can limit exports of our MLB file by doing the same thing, but\nfor the SML files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml"},"local\n  file1.sml\n  file2.sml\nin\n  structure C = B (* example of renaming structure B *)\n  functor F\nend (* only structure C and F may be used in importing files *)\n")),(0,i.kt)("h3",{id:"mlb-path-variables"},"MLB Path Variables"),(0,i.kt)("p",null,"These are simply variables defined at compile time that allow us to adjust how\nand what files are loaded. They can also be used so that the exact path of a\nfile doesn't need to be known when writing the MLB file."),(0,i.kt)("p",null,"These are denoted as ",(0,i.kt)("inlineCode",{parentName:"p"},"$(PATH_VARIABLE)")," in the MLB file. The most common path\nvariable you may see is ",(0,i.kt)("inlineCode",{parentName:"p"},"$(SML_LIB)"),", which is by default the path for the\nSML implementation. So you may see something along the lines of:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml"},"$(SML_LIB)/basis/basis.mlb\n")),(0,i.kt)("p",null,"Which loads the Standard Basis Library. More libraries can be found\n",(0,i.kt)("a",{parentName:"p",href:"http://mlton.org/MLBasisAvailableLibraries"},"here"),"."),(0,i.kt)("h2",{id:"cm-files"},"CM Files"),(0,i.kt)("p",null,"See the official documentation ",(0,i.kt)("a",{parentName:"p",href:"https://www.smlnj.org/doc/CM/new.pdf"},"here"),"."),(0,i.kt)("p",null,"CM files allow for ",(0,i.kt)("em",{parentName:"p"},"only")," the export of structure-level declarations between\nfiles. It is defined by two different type of files. A library file and a\nlibrary component file (called a group). Importantly, a group may only be used\nby one library which references it. It may be referenced by as many other\ngroups, so long as they all exist within the same library."),(0,i.kt)("p",null,"In general, the cabailities of CM files are very complex and there are tons of\ninteresting features which can be used. In other words, this is very brief\noverview of CM files. So, read the documentation if you want to learn more."),(0,i.kt)("p",null,"A CM library file is structured as follows"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml"},"Library\n  signature A\n  structure B\n  functor F\nis\n  lib1.cm\n  lib2.cm\n  file1.sml\n  file2.sml\n")),(0,i.kt)("p",null,"Between the ",(0,i.kt)("inlineCode",{parentName:"p"},"Library")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"is")," contain the declarations which are being exported\nand may be used outside of the library. There must be at least one such\ndeclaration. Below the ",(0,i.kt)("inlineCode",{parentName:"p"},"is")," is a list of files used in the library. These files\ndo not need to be ordered."),(0,i.kt)("p",null,"A group is similar to a ",(0,i.kt)("inlineCode",{parentName:"p"},"library")," but the ",(0,i.kt)("inlineCode",{parentName:"p"},"Library")," keyword is replaced by\n",(0,i.kt)("inlineCode",{parentName:"p"},"Group"),", and the export list can be left blank and will be infered from the\nexports in the files."),(0,i.kt)("h3",{id:"anchors"},"Anchors"),(0,i.kt)("p",null,"These are variables which can appear in CM files. They are often used to give a\nshorthand of common paths. They are denoted as ",(0,i.kt)("inlineCode",{parentName:"p"},"$ANCHOR_NAME")," and they must\nappear at the start of a file path."),(0,i.kt)("p",null,"You may see ",(0,i.kt)("inlineCode",{parentName:"p"},"$/basis.cm")," which implements the Standard Basis Library. Likewise,\n",(0,i.kt)("inlineCode",{parentName:"p"},"$/smlnj-lib.cm")," implement a variety of extensions provided by SML/NJ."))}c.isMDXComponent=!0}}]);