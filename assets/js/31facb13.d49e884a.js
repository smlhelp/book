"use strict";(self.webpackChunksmlhelp=self.webpackChunksmlhelp||[]).push([[6662],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,k=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8882:(e,t,n)=>{n.d(t,{B:()=>i});var a=n(7294);const r="center_wFZg";function i(e){return a.createElement("figure",{className:r},e.figure?e.figure:a.createElement("img",{src:e.img,alt:e.alt}),a.createElement("figcaption",null,a.createElement("b",null,"Fig ",e.idx,".")," ",e.children))}},9629:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>za,contentTitle:()=>ja,default:()=>Fa,frontMatter:()=>Da,metadata:()=>Aa,toc:()=>Ka});var a,r,i,l,o,s,c,m,d,p,h,k,u,f,y,E,v,g,N,w,b,x,M,C,S,Z,L,H,W,R,T,B,O,D,j,A,z,K,I,F,q,U,V,P,_,G,Q,X,Y,J,$,ee,te,ne,ae,re,ie,le,oe,se,ce,me,de,pe,he,ke,ue,fe,ye,Ee,ve,ge,Ne,we,be,xe,Me,Ce,Se,Ze,Le,He,We,Re,Te,Be,Oe,De,je,Ae,ze,Ke,Ie,Fe,qe,Ue,Ve,Pe,_e,Ge,Qe,Xe,Ye,Je,$e,et,tt,nt,at,rt,it,lt,ot,st,ct,mt,dt,pt,ht,kt,ut,ft,yt,Et,vt,gt,Nt=n(7462),wt=n(7294),bt=n(3905),xt=n(8882);function Mt(){return Mt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Mt.apply(this,arguments)}const Ct=e=>{let{title:t,titleId:n,...Nt}=e;return wt.createElement("svg",Mt({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",width:343.301,height:386.84,viewBox:"-72 -72 257.476 290.13","aria-labelledby":n},Nt),t?wt.createElement("title",{id:n},t):null,a||(a=wt.createElement("defs",null,wt.createElement("path",{id:"j",d:"M4.563-6.386c.01-.03.03-.11.03-.13 0-.08-.06-.12-.12-.12s-.07.01-.19.16C3.518-5.45 2.82-5.38 2.532-5.35c-.05.01-.16.02-.16.19 0 .119.12.119.16.119.149 0 .637-.06 1.105-.409L2.461-.727c-.08.319-.16.418-.937.418h-.08c-.169 0-.278 0-.278.19 0 .119.11.119.15.119.427 0 .876-.03 1.304-.03.439 0 .897.03 1.335.03.07 0 .2 0 .2-.19 0-.119-.1-.119-.26-.119h-.08c-.129 0-.298-.01-.428-.02-.219-.03-.279-.04-.279-.18 0-.059.02-.149.03-.188l1.425-5.69Z"}),wt.createElement("path",{id:"k",d:"M1.514-.737c.498-.857 1.226-1.265 1.535-1.445 1.534-.867 2.44-1.484 2.44-2.77 0-1.145-.777-1.683-1.554-1.683-1.474 0-2.291 2.012-2.291 2.66 0 .2.06.628.508.628.787 0 1.205-1.196 1.205-1.575 0-.179-.09-.528-.219-.528a.11.11 0 0 0-.11.11c0 .02 0 .04.01.06.06.12.1.249.1.368 0 .29-.368 1.345-.976 1.345-.12 0-.22-.05-.22-.328 0-.648.748-2.52 1.963-2.52.409 0 .877.268.877 1.095 0 1.445-.867 2.281-1.853 2.87-.448.268-.867.507-1.285 1.025C.946-.588.837.11.837.12c0 .1.1.1.15.1.119 0 .139-.02.169-.13.08-.28.259-.638.558-.638.318 0 .597.2.846.369.26.179.568.398.967.398C4.672.22 5.13-1.514 5.13-1.624c0-.1-.08-.1-.15-.1-.12 0-.13.01-.169.17-.14.408-.528 1.076-1.196 1.076-.279 0-.667-.08-.826-.12-.36-.08-.748-.17-1.057-.17-.11 0-.199.02-.219.03Z"}),wt.createElement("path",{id:"l",d:"M3.029-3.487c-.17 0-.26 0-.26.21 0 .099.08.099.25.099h.279c.189 0 .767.02.767.827 0 .18-.09 1.165-.608 1.763C3.178-.249 2.72 0 2.271 0c-.498 0-.996-.299-1.016-1.036a.493.493 0 0 0 .558-.478c0-.16-.11-.32-.339-.32-.508 0-.528.599-.528.778 0 .677.479 1.275 1.325 1.275 1.256 0 2.511-1.046 2.511-2.241 0-.19-.04-.917-.797-1.266C5.021-3.636 5.6-4.543 5.6-5.3c0-.847-.648-1.335-1.425-1.335-1.185 0-2.191 1.046-2.191 1.893 0 .348.189.637.557.637s.827-.348.827-.846c0-.19-.11-.499-.229-.499a.11.11 0 0 0-.11.11c0 .03.01.05.04.11.01.01.08.14.08.289 0 .338-.319.617-.608.617-.199 0-.259-.19-.259-.368 0-.787.907-1.724 1.873-1.724.369 0 .847.18.847.897 0 .16-.1 2.032-1.743 2.032h-.23Z"}),wt.createElement("path",{id:"m",d:"M4.115-1.943c.04-.15.04-.17.04-.199 0-.259-.24-.269-.27-.269-.298 0-.358.26-.398.428-.03.1-.409 1.594-.419 1.654-.727-.259-.318-.13-.607-.229-.369-.11-.538-.11-.757-.11-.12 0-.14 0-.27.01 2.69-2.49 3.268-5.708 3.268-5.718 0-.21-.169-.26-.269-.26-.289 0-.348.23-.418.499-.329 1.245-.767 2.44-1.475 3.597C1.753-1.265.867-.568.827-.538c-.07.03-.389.2-.389.359 0 .04.07.169.15.169.06 0 .209-.12.319-.2.09-.079.179-.149.767-.149.18 0 .378 0 .727.11.13.05.369.15.588.23L2.62 1.464c-.04.149-.04.169-.04.209 0 .209.17.259.27.259.189 0 .318-.11.378-.339L3.597.139c.06.01.139.01.199.01.279 0 .926-.13.926-.288 0-.05-.06-.17-.15-.17-.02 0-.039 0-.139.04-.179.07-.428.11-.597.11-.07 0-.11 0-.16-.01l.439-1.774Z"}),wt.createElement("path",{id:"f",d:"M8.07-6.785c.01-.04.02-.1.02-.139 0-.02-.01-.1-.11-.1-.02 0-.07 0-.16.11l-.627.737c-.428-.687-1.006-.847-1.504-.847-2.053 0-4.195 2.242-4.195 4.583C1.494-.807 2.56.22 3.935.22c1.943 0 3.029-2.132 3.029-2.61 0-.1-.1-.1-.15-.1-.06 0-.13 0-.159.08C6.147-.727 4.902-.09 4.075-.09c-.837 0-1.714-.558-1.714-1.972 0-.618.25-2.182 1.046-3.278.678-.917 1.594-1.375 2.361-1.375 1.056 0 1.415.957 1.415 1.823 0 .26-.05.578-.05.608 0 .1.1.1.15.1.11 0 .14-.01.179-.18l.608-2.42Z"}),wt.createElement("path",{id:"g",d:"M3.477-.588c.11.488.478.698.827.698.368 0 .578-.25.727-.558.18-.379.299-.957.299-.977 0-.1-.08-.1-.15-.1-.119 0-.129.01-.189.23-.14.558-.328 1.185-.667 1.185-.26 0-.26-.269-.26-.408 0-.07 0-.23.07-.508l.678-2.71c.04-.14.04-.16.04-.21 0-.208-.17-.258-.27-.258-.318 0-.388.338-.398.388-.189-.428-.508-.587-.827-.587-1.105 0-2.281 1.514-2.281 2.968 0 .847.458 1.545 1.205 1.545.36 0 .797-.21 1.196-.698Zm.538-2.53-.468 1.883C3.467-.917 2.849-.11 2.3-.11c-.468 0-.548-.587-.548-.886 0-.498.31-1.664.489-2.082.249-.608.707-1.106 1.115-1.106.439 0 .688.518.688.936 0 .02-.01.07-.03.13Z"}),wt.createElement("path",{id:"i",d:"M2.381-2.301c.299 0 .966-.03 1.445-.22.787-.318.787-.966.787-1.036 0-.458-.369-.846-1.007-.846-1.046 0-2.47 1.006-2.47 2.77C1.136-.738 1.614.11 2.56.11c1.276 0 2.103-.997 2.103-1.146 0-.05-.08-.16-.16-.16-.04 0-.05.01-.13.11-.737.937-1.623.976-1.793.976-.647 0-.757-.707-.757-1.095 0-.38.1-.827.17-1.096h.388Zm-.329-.22c.429-1.633 1.455-1.663 1.554-1.663.399 0 .628.269.628.607 0 1.056-1.644 1.056-1.972 1.056h-.21Z"}),wt.createElement("path",{id:"h",d:"M2.46-1.963c.44.1.887.2.887.738 0 .318-.269 1.115-1.295 1.115-.219 0-.797-.05-.956-.557.508-.05.508-.469.508-.489 0-.189-.13-.318-.339-.318-.229 0-.508.169-.508.617 0 .608.578.967 1.285.967 1.495 0 1.873-1.216 1.873-1.674 0-.867-.777-1.046-1.185-1.136-.28-.06-.638-.14-.638-.568 0-.239.21-.916 1.006-.916.27 0 .638.1.748.488a.436.436 0 0 0-.399.408c0 .11.06.28.299.28.17 0 .428-.12.428-.549 0-.458-.408-.846-1.066-.846A1.512 1.512 0 0 0 1.534-2.93c0 .767.648.907.927.966Z"}),wt.createElement("path",{id:"b",d:"M3.975-2.88c0-1.015-.727-1.713-1.644-1.713-.647 0-1.096.16-1.564.429l.06.657c.518-.368 1.016-.498 1.504-.498.469 0 .867.399.867 1.136v.428c-1.494.02-2.76.439-2.76 1.315C.438-.697.708.11 1.574.11c.14 0 1.076-.02 1.654-.469V0h.747v-2.88Zm-.777 1.565c0 .19 0 .438-.339.628-.289.179-.667.189-.777.189-.478 0-.926-.23-.926-.648 0-.697 1.614-.767 2.042-.787v.618Z"}),wt.createElement("path",{id:"c",d:"M1.564-6.914H.817V0h.777v-.458c.24.219.668.568 1.335.568.996 0 1.853-.997 1.853-2.332 0-1.235-.677-2.311-1.614-2.311-.388 0-1.006.1-1.604.588v-2.97Zm.03 3.577c.16-.24.518-.588 1.066-.588.588 0 1.345.428 1.345 1.703 0 1.295-.837 1.724-1.445 1.724-.388 0-.717-.18-.966-.638v-2.201Z"}),wt.createElement("path",{id:"d",d:"M4.085-4.164c-.588-.34-.927-.429-1.535-.429C1.166-4.593.36-3.387.36-2.212.359-.976 1.265.11 2.51.11c.538 0 1.086-.14 1.623-.509l-.06-.667a2.457 2.457 0 0 1-1.553.538c-.827 0-1.385-.717-1.385-1.694 0-.777.368-1.733 1.424-1.733.518 0 .857.08 1.405.438l.12-.647Z"}),wt.createElement("path",{id:"e",d:"M4.324-6.914h-.747v2.929a2.295 2.295 0 0 0-1.455-.548c-.986 0-1.763 1.036-1.763 2.321C.359-.907 1.126.11 2.072.11c.329 0 .917-.09 1.475-.628V0h.777v-6.914Zm-.777 5.53c0 .139-.01.318-.33.607-.228.2-.477.279-.736.279-.618 0-1.345-.468-1.345-1.704 0-1.315.857-1.723 1.444-1.723.449 0 .748.229.967.548v1.992Z"}),wt.createElement("path",{id:"a",d:"M4.682-2.072h2.7c.1 0 .528 0 .528-.419s-.428-.418-.528-.418h-2.7v-2.71c0-.1 0-.528-.418-.528s-.418.428-.418.528v2.71h-2.71c-.1 0-.528 0-.528.418s.428.419.528.419h2.71v2.71c0 .1 0 .528.418.528s.418-.429.418-.528v-2.71Z"}))),r||(r=wt.createElement("path",{fill:"#fff",d:"M-72-72h257.476v290.13H-72z"})),i||(i=wt.createElement("path",{d:"M27.719-43.262a7.442 7.442 0 0 0-14.883 0 7.445 7.445 0 0 0 7.441 7.446 7.445 7.445 0 0 0 7.442-7.446Z"})),l||(l=wt.createElement("path",{d:"M27.719-43.262a7.442 7.442 0 0 0-14.883 0 7.445 7.445 0 0 0 7.441 7.446 7.445 7.445 0 0 0 7.442-7.446Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),o||(o=wt.createElement("path",{d:"M8.844-8.887a7.445 7.445 0 0 0-7.446-7.441 7.442 7.442 0 0 0-7.441 7.441 7.443 7.443 0 1 0 14.887 0Z",fill:"red"})),s||(s=wt.createElement("path",{d:"M8.844-8.887a7.445 7.445 0 0 0-7.446-7.441 7.442 7.442 0 0 0-7.441 7.441 7.443 7.443 0 1 0 14.887 0Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),c||(c=wt.createElement("path",{d:"M-6.484 26.047a8.318 8.318 0 0 0-8.317-8.317 8.318 8.318 0 0 0-8.316 8.317 8.315 8.315 0 0 0 8.316 8.316 8.315 8.315 0 0 0 8.317-8.316Z",fill:"red"})),m||(m=wt.createElement("path",{d:"M-6.484 26.047a8.318 8.318 0 0 0-8.317-8.317 8.318 8.318 0 0 0-8.316 8.317 8.315 8.315 0 0 0 8.316 8.316 8.315 8.315 0 0 0 8.317-8.316Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),d||(d=wt.createElement("use",{x:23.488,y:-43.261,xlinkHref:"#a",fill:"#fff",transform:"translate(-42.55 71.8)"})),p||(p=wt.createElement("use",{x:20.277,y:-43.261,xlinkHref:"#b",transform:"translate(-48.315 104.559)"})),h||(h=wt.createElement("use",{x:20.277,y:-43.261,xlinkHref:"#c",transform:"translate(-26.809 104.559)"})),k||(k=wt.createElement("use",{x:20.277,y:-43.261,xlinkHref:"#d",transform:"translate(-4.893 71.8)"})),u||(u=wt.createElement("use",{x:20.277,y:-43.261,xlinkHref:"#e",transform:"translate(16.305 34.376)"})),f||(f=wt.createElement("path",{d:"M16.598-36.563 5.558-16.456",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),y||(y=wt.createElement("path",{d:"M5.172-15.758c.656-.777 1.484-1.46 2.672-2.172-1.364.617-2.063.235-2.27-1.246.035 1.383-.097 2.45-.402 3.418Z"})),E||(E=wt.createElement("path",{d:"M5.172-15.758c.656-.777 1.484-1.46 2.672-2.172-1.364.617-2.063.235-2.27-1.246.035 1.383-.097 2.45-.402 3.418Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),v||(v=wt.createElement("path",{d:"m-1.816-1.953-8.985 19.371",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),g||(g=wt.createElement("path",{d:"M-11.133 18.14c.598-.816 1.38-1.554 2.516-2.343-1.317.707-2.04.371-2.352-1.09.13 1.375.074 2.45-.164 3.434Z"})),N||(N=wt.createElement("path",{d:"M-11.133 18.14c.598-.816 1.38-1.554 2.516-2.343-1.317.707-2.04.371-2.352-1.09.13 1.375.074 2.45-.164 3.434Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),w||(w=wt.createElement("path",{d:"m-17.457 34.14-6.797 20.712",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),b||(b=wt.createElement("path",{d:"M-24.504 55.61c.5-.887 1.191-1.708 2.227-2.626-1.227.856-1.985.606-2.461-.808.289 1.351.355 2.422.234 3.433Z"})),x||(x=wt.createElement("path",{d:"M-24.504 55.61c.5-.887 1.191-1.708 2.227-2.626-1.227.856-1.985.606-2.461-.808.289 1.351.355 2.422.234 3.433Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),M||(M=wt.createElement("path",{d:"m-12.05 34.11 6.32 18.527",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),C||(C=wt.createElement("path",{d:"M-5.473 53.39c-.132-1.003-.078-2.077.196-3.433-.461 1.422-1.22 1.68-2.453.836 1.046.906 1.746 1.723 2.257 2.598Z"})),S||(S=wt.createElement("path",{d:"M-5.473 53.39c-.132-1.003-.078-2.077.196-3.433-.461 1.422-1.22 1.68-2.453.836 1.046.906 1.746 1.723 2.257 2.598Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Z||(Z=wt.createElement("path",{d:"m4.594-1.945 11.195 24.34",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),L||(L=wt.createElement("path",{d:"M16.125 23.117c-.238-.988-.293-2.058-.156-3.437-.317 1.46-1.04 1.797-2.356 1.086 1.133.793 1.914 1.53 2.512 2.351Z"})),H||(H=wt.createElement("path",{d:"M16.125 23.117c-.238-.988-.293-2.058-.156-3.437-.317 1.46-1.04 1.797-2.356 1.086 1.133.793 1.914 1.53 2.512 2.351Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),W||(W=wt.createElement("path",{d:"m24.262-36.738 12.031 19.703",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),R||(R=wt.createElement("path",{d:"M36.707-16.355c-.348-.954-.527-2.012-.555-3.395-.144 1.488-.824 1.902-2.21 1.352 1.218.656 2.078 1.296 2.765 2.043Z"})),T||(T=wt.createElement("path",{d:"M36.707-16.355c-.348-.954-.527-2.012-.555-3.395-.144 1.488-.824 1.902-2.21 1.352 1.218.656 2.078 1.296 2.765 2.043Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),B||(B=wt.createElement("path",{d:"M-47.664-44.18h37.523v-13.449h-37.523Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),O||(O=wt.createElement("g",{transform:"translate(-64.623 -4.238)"},wt.createElement("use",{x:20.277,y:-43.261,xlinkHref:"#f"}),wt.createElement("use",{x:27.406,y:-43.261,xlinkHref:"#g"}),wt.createElement("use",{x:32.498,y:-43.261,xlinkHref:"#h"}),wt.createElement("use",{x:36.572,y:-43.261,xlinkHref:"#i"}),wt.createElement("use",{x:44.719,y:-43.261,xlinkHref:"#j"}))),D||(D=wt.createElement("path",{d:"M146.844-43.133a7.443 7.443 0 0 0-7.446-7.441 7.442 7.442 0 0 0 0 14.883 7.443 7.443 0 0 0 7.446-7.442Z"})),j||(j=wt.createElement("path",{d:"M146.844-43.133a7.443 7.443 0 0 0-7.446-7.441 7.442 7.442 0 0 0 0 14.883 7.443 7.443 0 0 0 7.446-7.442Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),A||(A=wt.createElement("path",{d:"M122.558-8.758a7.442 7.442 0 0 0-7.441-7.441 7.443 7.443 0 1 0 0 14.887 7.445 7.445 0 0 0 7.441-7.446Z",fill:"red"})),z||(z=wt.createElement("path",{d:"M122.558-8.758a7.442 7.442 0 0 0-7.441-7.441 7.443 7.443 0 1 0 0 14.887 7.445 7.445 0 0 0 7.441-7.446Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),K||(K=wt.createElement("use",{x:139.4,y:-43.133,xlinkHref:"#b",transform:"translate(-42.91 71.8)"})),I||(I=wt.createElement("path",{d:"M139.664 26.176a8.315 8.315 0 0 0-8.316-8.317c-4.594 0-8.317 3.723-8.317 8.317s3.723 8.316 8.317 8.316a8.315 8.315 0 0 0 8.316-8.316Z",fill:"red"})),F||(F=wt.createElement("path",{d:"M139.664 26.176a8.315 8.315 0 0 0-8.316-8.317c-4.594 0-8.317 3.723-8.317 8.317s3.723 8.316 8.317 8.316a8.315 8.315 0 0 0 8.316-8.316Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),q||(q=wt.createElement("use",{x:142.61,y:-43.133,xlinkHref:"#a",fill:"#fff",transform:"translate(-15.524 71.8)"})),U||(U=wt.createElement("use",{x:139.4,y:-43.133,xlinkHref:"#c",transform:"translate(-21.404 104.559)"})),V||(V=wt.createElement("use",{x:139.4,y:-43.133,xlinkHref:"#d",transform:"translate(.513 104.559)"})),P||(P=wt.createElement("use",{x:139.4,y:-43.133,xlinkHref:"#e",transform:"translate(21.71 34.376)"})),_||(_=wt.createElement("path",{d:"m134.992-36.89-14.89 21.078",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),G||(G=wt.createElement("path",{d:"M119.64-15.16c.739-.7 1.637-1.285 2.899-1.86-1.422.461-2.074 0-2.117-1.492-.121 1.38-.371 2.422-.781 3.352Z"})),Q||(Q=wt.createElement("path",{d:"M119.64-15.16c.739-.7 1.637-1.285 2.899-1.86-1.422.461-2.074 0-2.117-1.492-.121 1.38-.371 2.422-.781 3.352Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),X||(X=wt.createElement("path",{d:"M111.918-1.816 100.75 22.406",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Y||(Y=wt.createElement("path",{d:"M100.414 23.133c.601-.824 1.378-1.559 2.511-2.356-1.312.711-2.039.38-2.351-1.082.133 1.375.078 2.45-.16 3.438Z"})),J||(J=wt.createElement("path",{d:"M100.414 23.133c.601-.824 1.378-1.559 2.511-2.356-1.312.711-2.039.38-2.351-1.082.133 1.375.078 2.45-.16 3.438Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),$||($=wt.createElement("path",{d:"m118.336-1.828 9.004 19.379",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),ee||(ee=wt.createElement("path",{d:"M127.676 18.273c-.238-.988-.297-2.058-.168-3.437-.309 1.46-1.031 1.797-2.352 1.094 1.137.789 1.918 1.523 2.52 2.343Z"})),te||(te=wt.createElement("path",{d:"M127.676 18.273c-.238-.988-.297-2.058-.168-3.437-.309 1.46-1.031 1.797-2.352 1.094 1.137.789 1.918 1.523 2.52 2.343Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),ne||(ne=wt.createElement("path",{d:"m128.613 34.242-6.281 18.52",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),ae||(ae=wt.createElement("path",{d:"M122.078 53.52c.507-.88 1.207-1.696 2.25-2.606-1.235.844-1.989.59-2.453-.832.277 1.355.332 2.43.203 3.438Z"})),re||(re=wt.createElement("path",{d:"M122.078 53.52c.507-.88 1.207-1.696 2.25-2.606-1.235.844-1.989.59-2.453-.832.277 1.355.332 2.43.203 3.438Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),ie||(ie=wt.createElement("path",{d:"m133.988 34.273 6.797 20.825",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),le||(le=wt.createElement("path",{d:"M141.03 55.855c-.12-1.007-.05-2.078.243-3.43-.48 1.415-1.238 1.66-2.461.802 1.031.921 1.723 1.746 2.219 2.628Z"})),oe||(oe=wt.createElement("path",{d:"M141.03 55.855c-.12-1.007-.05-2.078.243-3.43-.48 1.415-1.238 1.66-2.461.802 1.031.921 1.723 1.746 2.219 2.628Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),se||(se=wt.createElement("path",{d:"m144.121-37.125 16.168 20.586",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),ce||(ce=wt.createElement("path",{d:"M160.781-15.91c-.457-.906-.758-1.938-.949-3.309.031 1.496-.594 1.989-2.04 1.602 1.29.508 2.22 1.047 2.99 1.707Z"})),me||(me=wt.createElement("path",{d:"M160.781-15.91c-.457-.906-.758-1.938-.949-3.309.031 1.496-.594 1.989-2.04 1.602 1.29.508 2.22 1.047 2.99 1.707Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),de||(de=wt.createElement("path",{d:"M76.863-44.05h37.524V-57.5H76.863Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),pe||(pe=wt.createElement("g",{transform:"translate(-59.217 -4.238)"},wt.createElement("use",{x:139.4,y:-43.133,xlinkHref:"#f"}),wt.createElement("use",{x:146.528,y:-43.133,xlinkHref:"#g"}),wt.createElement("use",{x:151.62,y:-43.133,xlinkHref:"#h"}),wt.createElement("use",{x:155.694,y:-43.133,xlinkHref:"#i"}),wt.createElement("use",{x:163.841,y:-43.133,xlinkHref:"#k"}))),he||(he=wt.createElement("path",{d:"M-18.234 98.797a7.442 7.442 0 0 0-7.442-7.442 7.444 7.444 0 1 0 7.441 7.441Z"})),ke||(ke=wt.createElement("path",{d:"M-18.234 98.797a7.442 7.442 0 0 0-7.442-7.442 7.444 7.444 0 1 0 7.441 7.441Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),ue||(ue=wt.createElement("use",{x:-25.677,y:98.798,xlinkHref:"#b",transform:"translate(-21.322 34.06)"})),fe||(fe=wt.createElement("path",{d:"M.695 132.86a7.443 7.443 0 1 0-14.887 0 7.442 7.442 0 0 0 7.442 7.44 7.445 7.445 0 0 0 7.445-7.44Z",fill:"red"})),ye||(ye=wt.createElement("path",{d:"M.695 132.86a7.443 7.443 0 1 0-14.887 0 7.442 7.442 0 0 0 7.442 7.44 7.445 7.445 0 0 0 7.445-7.44Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Ee||(Ee=wt.createElement("use",{x:-25.677,y:98.798,xlinkHref:"#c",transform:"translate(.186 71.484)"})),ve||(ve=wt.createElement("path",{d:"M17.734 167.793a8.316 8.316 0 0 0-8.316-8.317c-4.594 0-8.316 3.723-8.316 8.317s3.722 8.316 8.316 8.316a8.315 8.315 0 0 0 8.316-8.316Z",fill:"red"})),ge||(ge=wt.createElement("path",{d:"M17.734 167.793a8.316 8.316 0 0 0-8.316-8.317c-4.594 0-8.316 3.723-8.316 8.317s3.722 8.316 8.316 8.316a8.315 8.315 0 0 0 8.316-8.316Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Ne||(Ne=wt.createElement("use",{x:-22.467,y:98.798,xlinkHref:"#a",fill:"#fff",transform:"translate(27.623 71.484)"})),we||(we=wt.createElement("use",{x:-25.677,y:98.798,xlinkHref:"#d",transform:"translate(22.103 104.243)"})),be||(be=wt.createElement("use",{x:-25.677,y:98.798,xlinkHref:"#e",transform:"translate(43.3 104.243)"})),xe||(xe=wt.createElement("path",{d:"m-29.582 105.367-12.746 21.445",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Me||(Me=wt.createElement("path",{d:"M-42.734 127.5c.68-.754 1.53-1.407 2.742-2.079-1.383.57-2.07.16-2.227-1.324-.011 1.383-.18 2.446-.515 3.403Z"})),Ce||(Ce=wt.createElement("path",{d:"M-42.734 127.5c.68-.754 1.53-1.407 2.742-2.079-1.383.57-2.07.16-2.227-1.324-.011 1.383-.18 2.446-.515 3.403Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Se||(Se=wt.createElement("path",{d:"m-21.965 105.477 11.02 19.832",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Ze||(Ze=wt.createElement("path",{d:"M-10.559 126.004c-.308-.969-.445-2.031-.418-3.414-.203 1.48-.898 1.867-2.261 1.258 1.191.703 2.023 1.382 2.68 2.156Z"})),Le||(Le=wt.createElement("path",{d:"M-10.559 126.004c-.308-.969-.445-2.031-.418-3.414-.203 1.48-.898 1.867-2.261 1.258 1.191.703 2.023 1.382 2.68 2.156Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),He||(He=wt.createElement("path",{d:"m-10.035 139.758-10.52 22.105",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),We||(We=wt.createElement("path",{d:"M-20.898 162.582c.609-.813 1.394-1.543 2.539-2.32-1.325.69-2.043.35-2.34-1.114.117 1.379.05 2.45-.2 3.434Z"})),Re||(Re=wt.createElement("path",{d:"M-20.898 162.582c.609-.813 1.394-1.543 2.539-2.32-1.325.69-2.043.35-2.34-1.114.117 1.379.05 2.45-.2 3.434Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Te||(Te=wt.createElement("path",{d:"m-3.54 139.793 8.962 19.367",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Be||(Be=wt.createElement("path",{d:"M5.758 159.883c-.238-.988-.293-2.058-.164-3.437-.313 1.46-1.035 1.797-2.352 1.09 1.137.789 1.918 1.527 2.516 2.347Z"})),Oe||(Oe=wt.createElement("path",{d:"M5.758 159.883c-.238-.988-.293-2.058-.164-3.437-.313 1.46-1.035 1.797-2.352 1.09 1.137.789 1.918 1.527 2.516 2.347Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),De||(De=wt.createElement("path",{d:"m6.777 175.887-6.796 20.828",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),je||(je=wt.createElement("path",{d:"M-.266 197.473c.5-.887 1.188-1.711 2.22-2.63-1.224.856-1.981.61-2.462-.804.293 1.352.363 2.422.242 3.434Z"})),Ae||(Ae=wt.createElement("path",{d:"M-.266 197.473c.5-.887 1.188-1.711 2.22-2.63-1.224.856-1.981.61-2.462-.804.293 1.352.363 2.422.242 3.434Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),ze||(ze=wt.createElement("path",{d:"m12.152 175.856 6.282 18.523",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Ke||(Ke=wt.createElement("path",{d:"M18.688 195.132c-.13-1.007-.075-2.078.203-3.433-.465 1.418-1.22 1.676-2.453.832 1.046.906 1.742 1.722 2.25 2.601Z"})),Ie||(Ie=wt.createElement("path",{d:"M18.688 195.132c-.13-1.007-.075-2.078.203-3.433-.465 1.418-1.22 1.676-2.453.832 1.046.906 1.742 1.722 2.25 2.601Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Fe||(Fe=wt.createElement("path",{d:"M5.734 97.879h37.524v-13.45H5.734Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),qe||(qe=wt.createElement("g",{transform:"translate(34.73 -4.238)"},wt.createElement("use",{x:-25.677,y:98.798,xlinkHref:"#f"}),wt.createElement("use",{x:-18.548,y:98.798,xlinkHref:"#g"}),wt.createElement("use",{x:-13.456,y:98.798,xlinkHref:"#h"}),wt.createElement("use",{x:-9.383,y:98.798,xlinkHref:"#i"}),wt.createElement("use",{x:-1.236,y:98.798,xlinkHref:"#l"}))),Ue||(Ue=wt.createElement("path",{d:"M111.684 98.797a7.442 7.442 0 0 0-14.883 0 7.443 7.443 0 0 0 7.441 7.445 7.443 7.443 0 0 0 7.442-7.445Z"})),Ve||(Ve=wt.createElement("path",{d:"M111.684 98.797a7.442 7.442 0 0 0-14.883 0 7.443 7.443 0 0 0 7.441 7.445 7.443 7.443 0 0 0 7.442-7.445Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Pe||(Pe=wt.createElement("use",{x:104.242,y:98.798,xlinkHref:"#b",transform:"translate(-26.712 34.06)"})),_e||(_e=wt.createElement("path",{d:"M136.004 132.86a7.444 7.444 0 1 0-14.887-.004 7.444 7.444 0 0 0 14.887.004Z",fill:"red"})),Ge||(Ge=wt.createElement("path",{d:"M136.004 132.86a7.444 7.444 0 1 0-14.887-.004 7.444 7.444 0 0 0 14.887.004Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Qe||(Qe=wt.createElement("path",{d:"M120.707 167.793a8.315 8.315 0 0 0-8.317-8.317 8.318 8.318 0 0 0 0 16.633 8.315 8.315 0 0 0 8.317-8.316Z",fill:"red"})),Xe||(Xe=wt.createElement("path",{d:"M120.707 167.793a8.315 8.315 0 0 0-8.317-8.317 8.318 8.318 0 0 0 0 16.633 8.315 8.315 0 0 0 8.317-8.316Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Ye||(Ye=wt.createElement("use",{x:107.453,y:98.798,xlinkHref:"#a",fill:"#fff",transform:"translate(.678 71.484)"})),Je||(Je=wt.createElement("use",{x:104.242,y:98.798,xlinkHref:"#c",transform:"translate(-5.202 104.243)"})),$e||($e=wt.createElement("use",{x:104.242,y:98.798,xlinkHref:"#d",transform:"translate(16.715 104.243)"})),et||(et=wt.createElement("use",{x:104.242,y:98.798,xlinkHref:"#e",transform:"translate(37.912 71.484)"})),tt||(tt=wt.createElement("path",{d:"m99.605 104.871-16.976 22.23",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),nt||(nt=wt.createElement("path",{d:"M82.144 127.738c.762-.672 1.684-1.223 2.965-1.75-1.437.406-2.074-.078-2.058-1.57-.172 1.37-.461 2.406-.907 3.32Z"})),at||(at=wt.createElement("path",{d:"M82.144 127.738c.762-.672 1.684-1.223 2.965-1.75-1.437.406-2.074-.078-2.058-1.57-.172 1.37-.461 2.406-.907 3.32Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),rt||(rt=wt.createElement("path",{d:"m108.684 105.016 14.855 20.812",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),it||(it=wt.createElement("path",{d:"M124.004 126.477c-.418-.926-.672-1.969-.797-3.348-.035 1.496-.683 1.957-2.11 1.504 1.263.57 2.165 1.148 2.907 1.844Z"})),lt||(lt=wt.createElement("path",{d:"M124.004 126.477c-.418-.926-.672-1.969-.797-3.348-.035 1.496-.683 1.957-2.11 1.504 1.263.57 2.165 1.148 2.907 1.844Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),ot||(ot=wt.createElement("path",{d:"m125.352 139.793-8.965 19.367",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),st||(st=wt.createElement("path",{d:"M116.05 159.883c.602-.82 1.383-1.558 2.516-2.347-1.316.707-2.039.37-2.351-1.09.132 1.379.074 2.449-.164 3.437Z"})),ct||(ct=wt.createElement("path",{d:"M116.05 159.883c.602-.82 1.383-1.558 2.516-2.347-1.316.707-2.039.37-2.351-1.09.132 1.379.074 2.449-.164 3.437Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),mt||(mt=wt.createElement("path",{d:"m109.656 175.856-6.277 18.523",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),dt||(dt=wt.createElement("path",{d:"M103.121 195.132c.508-.879 1.207-1.695 2.25-2.601-1.23.844-1.988.586-2.453-.832.277 1.355.336 2.426.203 3.433Z"})),pt||(pt=wt.createElement("path",{d:"M103.121 195.132c.508-.879 1.207-1.695 2.25-2.601-1.23.844-1.988.586-2.453-.832.277 1.355.336 2.426.203 3.433Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),ht||(ht=wt.createElement("path",{d:"m115.035 175.887 6.793 20.828",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),kt||(kt=wt.createElement("path",{d:"M122.074 197.473c-.117-1.012-.047-2.082.246-3.434-.484 1.414-1.242 1.66-2.464.805 1.035.918 1.722 1.742 2.218 2.629Z"})),ut||(ut=wt.createElement("path",{d:"M122.074 197.473c-.117-1.012-.047-2.082.246-3.434-.484 1.414-1.242 1.66-2.464.805 1.035.918 1.722 1.742 2.218 2.629Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),ft||(ft=wt.createElement("path",{d:"m131.844 139.758 10.523 22.105",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),yt||(yt=wt.createElement("path",{d:"M142.707 162.582c-.246-.985-.316-2.055-.2-3.434-.296 1.465-1.015 1.805-2.339 1.113 1.144.778 1.934 1.508 2.539 2.32Z"})),Et||(Et=wt.createElement("path",{d:"M142.707 162.582c-.246-.985-.316-2.055-.2-3.434-.296 1.465-1.015 1.805-2.339 1.113 1.144.778 1.934 1.508 2.539 2.32Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),vt||(vt=wt.createElement("path",{d:"M130.262 98.848h37.527V83.46h-37.527Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),gt||(gt=wt.createElement("g",{transform:"translate(29.342 -5.207)"},wt.createElement("use",{x:104.242,y:98.798,xlinkHref:"#f"}),wt.createElement("use",{x:111.371,y:98.798,xlinkHref:"#g"}),wt.createElement("use",{x:116.463,y:98.798,xlinkHref:"#h"}),wt.createElement("use",{x:120.537,y:98.798,xlinkHref:"#i"}),wt.createElement("use",{x:128.684,y:98.798,xlinkHref:"#m"}))))};var St,Zt,Lt,Ht,Wt,Rt,Tt,Bt,Ot,Dt,jt,At,zt,Kt,It,Ft,qt,Ut,Vt,Pt,_t,Gt,Qt,Xt,Yt,Jt,$t,en,tn,nn,an,rn,ln,on,sn,cn,mn,dn,pn,hn,kn,un,fn,yn,En,vn,gn,Nn,wn,bn,xn,Mn,Cn,Sn,Zn,Ln,Hn,Wn,Rn,Tn,Bn,On,Dn,jn,An,zn,Kn,In,Fn;function qn(){return qn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},qn.apply(this,arguments)}const Un=e=>{let{title:t,titleId:n,...a}=e;return wt.createElement("svg",qn({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",width:338.955,height:206.185,viewBox:"-72 -72 254.216 154.639","aria-labelledby":n},a),t?wt.createElement("title",{id:n},t):null,St||(St=wt.createElement("defs",null,wt.createElement("path",{id:"l",d:"M4.563-6.386c.01-.03.03-.11.03-.13 0-.08-.06-.12-.12-.12s-.07.01-.19.16C3.518-5.45 2.82-5.38 2.532-5.35c-.05.01-.16.02-.16.19 0 .119.12.119.16.119.149 0 .637-.06 1.105-.409L2.461-.727c-.08.319-.16.418-.937.418h-.08c-.169 0-.278 0-.278.19 0 .119.11.119.15.119.427 0 .876-.03 1.304-.03.439 0 .897.03 1.335.03.07 0 .2 0 .2-.19 0-.119-.1-.119-.26-.119h-.08c-.129 0-.298-.01-.428-.02-.219-.03-.279-.04-.279-.18 0-.059.02-.149.03-.188l1.425-5.69Z"}),wt.createElement("path",{id:"h",d:"M8.07-6.785c.01-.04.02-.1.02-.139 0-.02-.01-.1-.11-.1-.02 0-.07 0-.16.11l-.627.737c-.428-.687-1.006-.847-1.504-.847-2.053 0-4.195 2.242-4.195 4.583C1.494-.807 2.56.22 3.935.22c1.943 0 3.029-2.132 3.029-2.61 0-.1-.1-.1-.15-.1-.06 0-.13 0-.159.08C6.147-.727 4.902-.09 4.075-.09c-.837 0-1.714-.558-1.714-1.972 0-.618.25-2.182 1.046-3.278.678-.917 1.594-1.375 2.361-1.375 1.056 0 1.415.957 1.415 1.823 0 .26-.05.578-.05.608 0 .1.1.1.15.1.11 0 .14-.01.179-.18l.608-2.42Z"}),wt.createElement("path",{id:"i",d:"M3.477-.588c.11.488.478.698.827.698.368 0 .578-.25.727-.558.18-.379.299-.957.299-.977 0-.1-.08-.1-.15-.1-.119 0-.129.01-.189.23-.14.558-.328 1.185-.667 1.185-.26 0-.26-.269-.26-.408 0-.07 0-.23.07-.508l.678-2.71c.04-.14.04-.16.04-.21 0-.208-.17-.258-.27-.258-.318 0-.388.338-.398.388-.189-.428-.508-.587-.827-.587-1.105 0-2.281 1.514-2.281 2.968 0 .847.458 1.545 1.205 1.545.36 0 .797-.21 1.196-.698Zm.538-2.53-.468 1.883C3.467-.917 2.849-.11 2.3-.11c-.468 0-.548-.587-.548-.886 0-.498.31-1.664.489-2.082.249-.608.707-1.106 1.115-1.106.439 0 .688.518.688.936 0 .02-.01.07-.03.13Z"}),wt.createElement("path",{id:"k",d:"M2.381-2.301c.299 0 .966-.03 1.445-.22.787-.318.787-.966.787-1.036 0-.458-.369-.846-1.007-.846-1.046 0-2.47 1.006-2.47 2.77C1.136-.738 1.614.11 2.56.11c1.276 0 2.103-.997 2.103-1.146 0-.05-.08-.16-.16-.16-.04 0-.05.01-.13.11-.737.937-1.623.976-1.793.976-.647 0-.757-.707-.757-1.095 0-.38.1-.827.17-1.096h.388Zm-.329-.22c.429-1.633 1.455-1.663 1.554-1.663.399 0 .628.269.628.607 0 1.056-1.644 1.056-1.972 1.056h-.21Z"}),wt.createElement("path",{id:"j",d:"M2.46-1.963c.44.1.887.2.887.738 0 .318-.269 1.115-1.295 1.115-.219 0-.797-.05-.956-.557.508-.05.508-.469.508-.489 0-.189-.13-.318-.339-.318-.229 0-.508.169-.508.617 0 .608.578.967 1.285.967 1.495 0 1.873-1.216 1.873-1.674 0-.867-.777-1.046-1.185-1.136-.28-.06-.638-.14-.638-.568 0-.239.21-.916 1.006-.916.27 0 .638.1.748.488a.436.436 0 0 0-.399.408c0 .11.06.28.299.28.17 0 .428-.12.428-.549 0-.458-.408-.846-1.066-.846A1.512 1.512 0 0 0 1.534-2.93c0 .767.648.907.927.966Z"}),wt.createElement("path",{id:"d",d:"M3.975-2.88c0-1.015-.727-1.713-1.644-1.713-.647 0-1.096.16-1.564.429l.06.657c.518-.368 1.016-.498 1.504-.498.469 0 .867.399.867 1.136v.428c-1.494.02-2.76.439-2.76 1.315C.438-.697.708.11 1.574.11c.14 0 1.076-.02 1.654-.469V0h.747v-2.88Zm-.777 1.565c0 .19 0 .438-.339.628-.289.179-.667.189-.777.189-.478 0-.926-.23-.926-.648 0-.697 1.614-.767 2.042-.787v.618Z"}),wt.createElement("path",{id:"e",d:"M1.564-6.914H.817V0h.777v-.458c.24.219.668.568 1.335.568.996 0 1.853-.997 1.853-2.332 0-1.235-.677-2.311-1.614-2.311-.388 0-1.006.1-1.604.588v-2.97Zm.03 3.577c.16-.24.518-.588 1.066-.588.588 0 1.345.428 1.345 1.703 0 1.295-.837 1.724-1.445 1.724-.388 0-.717-.18-.966-.638v-2.201Z"}),wt.createElement("path",{id:"f",d:"M4.085-4.164c-.588-.34-.927-.429-1.535-.429C1.166-4.593.36-3.387.36-2.212.359-.976 1.265.11 2.51.11c.538 0 1.086-.14 1.623-.509l-.06-.667a2.457 2.457 0 0 1-1.553.538c-.827 0-1.385-.717-1.385-1.694 0-.777.368-1.733 1.424-1.733.518 0 .857.08 1.405.438l.12-.647Z"}),wt.createElement("path",{id:"g",d:"M4.324-6.914h-.747v2.929a2.295 2.295 0 0 0-1.455-.548c-.986 0-1.763 1.036-1.763 2.321C.359-.907 1.126.11 2.072.11c.329 0 .917-.09 1.475-.628V0h.777v-6.914Zm-.777 5.53c0 .139-.01.318-.33.607-.228.2-.477.279-.736.279-.618 0-1.345-.468-1.345-1.704 0-1.315.857-1.723 1.444-1.723.449 0 .748.229.967.548v1.992Z"}),wt.createElement("path",{id:"n",d:"M6.565-2.291c.17 0 .35 0 .35-.2s-.18-.199-.35-.199h-5.39c-.169 0-.348 0-.348.2s.18.199.349.199h5.39Z"}),wt.createElement("path",{id:"o",d:"M8.309-2.291c-.548.418-.817.826-.897.956-.448.687-.528 1.315-.528 1.325 0 .12.12.12.2.12.169 0 .179-.02.219-.2.229-.976.817-1.813 1.942-2.271.12-.04.15-.06.15-.13s-.06-.1-.08-.11c-.438-.169-1.644-.667-2.022-2.34-.03-.12-.04-.15-.21-.15-.08 0-.199 0-.199.12 0 .02.09.647.508 1.315.2.299.488.647.917.966H.907c-.18 0-.36 0-.36.2s.18.199.36.199h7.402Z"}),wt.createElement("path",{id:"m",d:"M.946-2.291c.06 0 .28 0 .28-.2s-.22-.199-.28-.199v-1.305c0-.16 0-.349-.199-.349s-.2.19-.2.349v3.009c0 .16 0 .348.2.348s.2-.189.2-.348v-1.305Z"}),wt.createElement("path",{id:"c",d:"M3.537-6.655c0-.19 0-.478-.439-.478-.199 0-.239.02-.358.14-.18.159-.558.527-1.544.547-.18 0-.439.07-.439.359 0 .358.349.358.478.358.3 0 .648-.05.937-.129v5.14h-.777c-.13 0-.478 0-.478.36S1.265 0 1.395 0h2.84c.109 0 .477 0 .477-.359s-.368-.358-.478-.358h-.697v-5.938Z"}),wt.createElement("path",{id:"b",d:"M.648-.847c-.1.1-.1.12-.1.29v.079c0 .358.11.478.478.478h3.417c.379 0 .479-.13.479-.478v-.12c0-.16 0-.348-.21-.438-.07-.04-.388-.04-.587-.04-.22 0-.459.01-.678.01H1.833l1.315-1.245c.15-.13.528-.439.678-.578.548-.538 1.096-1.066 1.096-1.953 0-1.215-.877-2.291-2.342-2.291-.348 0-.916.05-1.394.438-.09.07-.548.428-.728 1.096l.498.638c.06.08.09.12.16.12.09 0 .11-.07.14-.19.199-.688.537-1.106 1.175-1.106.777 0 1.096.707 1.096 1.315 0 .638-.379 1.305-.977 1.943L.648-.847Z"}),wt.createElement("path",{id:"a",d:"M.956-5.53c.08.12.13.12.15.12.07 0 .09-.04.14-.11.507-.727 1.215-.727 1.344-.727.638 0 .728.33.728.817 0 .14 0 .618-.31.997-.238.279-.487.299-.786.318-.11.01-.3.02-.33.04-.069.03-.069.09-.069.25v.179c0 .259.01.269.27.269h.438c.906 0 1.016.568 1.016 1.335 0 .667-.07 1.325-.977 1.325-.318 0-1.056-.07-1.723-.698-.09-.09-.1-.1-.14-.1-.1 0-.12.09-.13.11 0 .01-.119.638-.119.688 0 .13.857.936 2.162.936 1.714 0 2.391-.916 2.391-2.241 0-.897-.478-1.505-1.375-1.734.807-.438 1.076-1.086 1.076-1.654 0-1.594-1.424-1.723-2.072-1.723-1.365 0-2.032.976-2.032 1.056 0 .06.06.14.07.15l.278.398Z"}))),Zt||(Zt=wt.createElement("path",{fill:"#fff",d:"M-72-72h254.216V82.639H-72z"})),Lt||(Lt=wt.createElement("path",{d:"M34.469-42.496a8.21 8.21 0 1 0-16.42.005 8.21 8.21 0 0 0 16.42-.005Z"})),Ht||(Ht=wt.createElement("path",{d:"M34.469-42.496a8.21 8.21 0 1 0-16.42.005 8.21 8.21 0 0 0 16.42-.005Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Wt||(Wt=wt.createElement("use",{x:30.991,y:-39.035,xlinkHref:"#a",fill:"#fff",transform:"translate(-7.472)"})),Rt||(Rt=wt.createElement("path",{d:"M15.586-6.902a8.206 8.206 0 0 0-8.207-8.207 8.21 8.21 0 1 0 8.207 8.207Z",fill:"red"})),Tt||(Tt=wt.createElement("path",{d:"M15.586-6.902a8.206 8.206 0 0 0-8.207-8.207 8.21 8.21 0 1 0 8.207 8.207Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Bt||(Bt=wt.createElement("use",{x:30.991,y:-39.035,xlinkHref:"#b",fill:"#fff",transform:"translate(-26.353 35.594)"})),Ot||(Ot=wt.createElement("path",{d:"M-.613 28.691a8.21 8.21 0 1 0-16.42.006 8.21 8.21 0 0 0 16.42-.006Z",fill:"red"})),Dt||(Dt=wt.createElement("path",{d:"M-.613 28.691a8.21 8.21 0 1 0-16.42.006 8.21 8.21 0 0 0 16.42-.006Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),jt||(jt=wt.createElement("use",{x:30.991,y:-39.035,xlinkHref:"#c",fill:"#fff",transform:"translate(-42.554 71.187)"})),At||(At=wt.createElement("use",{x:26.259,y:-39.035,xlinkHref:"#d",transform:"translate(-48.318 102.87)"})),zt||(zt=wt.createElement("use",{x:26.259,y:-39.035,xlinkHref:"#e",transform:"translate(-26.813 102.87)"})),Kt||(Kt=wt.createElement("use",{x:26.259,y:-39.035,xlinkHref:"#f",transform:"translate(-4.894 71.187)"})),It||(It=wt.createElement("use",{x:26.259,y:-39.035,xlinkHref:"#g",transform:"translate(16.307 35.594)"})),Ft||(Ft=wt.createElement("path",{d:"M22.32-35.066 11.785-15.211",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),qt||(qt=wt.createElement("path",{d:"M11.41-14.504c.645-.789 1.465-1.48 2.64-2.21-1.35.636-2.058.26-2.288-1.216.054 1.383-.059 2.45-.352 3.426Z"})),Ut||(Ut=wt.createElement("path",{d:"M11.41-14.504c.645-.789 1.465-1.48 2.64-2.21-1.35.636-2.058.26-2.288-1.216.054 1.383-.059 2.45-.352 3.426Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Vt||(Vt=wt.createElement("path",{d:"m3.894.754-8.82 19.379",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Pt||(Pt=wt.createElement("path",{d:"M-5.258 20.86c.594-.825 1.371-1.567 2.5-2.368-1.312.719-2.035.387-2.36-1.07.141 1.375.09 2.445-.14 3.437Z"})),_t||(_t=wt.createElement("path",{d:"M-5.258 20.86c.594-.825 1.371-1.567 2.5-2.368-1.312.719-2.035.387-2.36-1.07.141 1.375.09 2.445-.14 3.437Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Gt||(Gt=wt.createElement("path",{d:"m-11.453 36.68-6.82 20.71",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Qt||(Qt=wt.createElement("path",{d:"M-18.523 58.145c.504-.883 1.191-1.704 2.23-2.622-1.226.856-1.984.606-2.46-.808.288 1.351.355 2.422.23 3.43Z"})),Xt||(Xt=wt.createElement("path",{d:"M-18.523 58.145c.504-.883 1.191-1.704 2.23-2.622-1.226.856-1.984.606-2.46-.808.288 1.351.355 2.422.23 3.43Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Yt||(Yt=wt.createElement("path",{d:"M-6.102 36.648.242 55.176",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Jt||(Jt=wt.createElement("path",{d:"M.5 55.93c-.137-1.004-.082-2.078.191-3.434-.46 1.422-1.214 1.68-2.449.84C-.71 54.238-.012 55.055.5 55.93Z"})),$t||($t=wt.createElement("path",{d:"M.5 55.93c-.137-1.004-.082-2.078.191-3.434-.46 1.422-1.214 1.68-2.449.84C-.71 54.238-.012 55.055.5 55.93Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),en||(en=wt.createElement("path",{d:"m10.762.797 11.074 25.18",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),tn||(tn=wt.createElement("path",{d:"M22.16 26.707c-.219-.992-.258-2.062-.101-3.437-.336 1.453-1.067 1.773-2.368 1.039 1.118.816 1.883 1.566 2.47 2.398Z"})),nn||(nn=wt.createElement("path",{d:"M22.16 26.707c-.219-.992-.258-2.062-.101-3.437-.336 1.453-1.067 1.773-2.368 1.039 1.118.816 1.883 1.566 2.47 2.398Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),an||(an=wt.createElement("path",{d:"m30.2-35.066 12.366 23.312",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),rn||(rn=wt.createElement("path",{d:"M42.938-11.05c-.29-.973-.407-2.04-.348-3.423-.235 1.477-.938 1.848-2.29 1.211 1.177.73 1.997 1.426 2.638 2.211Z"})),ln||(ln=wt.createElement("path",{d:"M42.938-11.05c-.29-.973-.407-2.04-.348-3.423-.235 1.477-.938 1.848-2.29 1.211 1.177.73 1.997 1.426 2.638 2.211Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),on||(on=wt.createElement("path",{d:"M-41.688-44.18h37.524v-13.449h-37.523Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),sn||(sn=wt.createElement("g",{transform:"translate(-64.626 -8.464)"},wt.createElement("use",{x:26.259,y:-39.035,xlinkHref:"#h"}),wt.createElement("use",{x:33.387,y:-39.035,xlinkHref:"#i"}),wt.createElement("use",{x:38.479,y:-39.035,xlinkHref:"#j"}),wt.createElement("use",{x:42.553,y:-39.035,xlinkHref:"#k"}),wt.createElement("use",{x:50.7,y:-39.035,xlinkHref:"#l"}))),cn||(cn=wt.createElement("use",{x:55.108,y:7.71,xlinkHref:"#m"})),mn||(mn=wt.createElement("use",{x:55.108,y:7.71,xlinkHref:"#n"})),dn||(dn=wt.createElement("use",{x:61.196,y:7.71,xlinkHref:"#o"})),pn||(pn=wt.createElement("path",{d:"M120.926-28.16a8.21 8.21 0 1 0-16.418 0 8.21 8.21 0 1 0 16.418 0Z",fill:"red"})),hn||(hn=wt.createElement("path",{d:"M120.926-28.16a8.21 8.21 0 1 0-16.418 0 8.21 8.21 0 1 0 16.418 0Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),kn||(kn=wt.createElement("use",{x:117.449,y:-24.7,xlinkHref:"#a",fill:"#fff",transform:"translate(-7.472)"})),un||(un=wt.createElement("path",{d:"M99.336 7.434a8.207 8.207 0 0 0-8.207-8.211 8.21 8.21 0 0 0-8.211 8.21 8.21 8.21 0 0 0 8.21 8.212 8.207 8.207 0 0 0 8.208-8.211Z"})),fn||(fn=wt.createElement("path",{d:"M99.336 7.434a8.207 8.207 0 0 0-8.207-8.211 8.21 8.21 0 0 0-8.211 8.21 8.21 8.21 0 0 0 8.21 8.212 8.207 8.207 0 0 0 8.208-8.211Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),yn||(yn=wt.createElement("use",{x:117.449,y:-24.7,xlinkHref:"#c",fill:"#fff",transform:"translate(-29.061 35.594)"})),En||(En=wt.createElement("use",{x:112.717,y:-24.7,xlinkHref:"#d",transform:"translate(-34.826 67.276)"})),vn||(vn=wt.createElement("use",{x:112.717,y:-24.7,xlinkHref:"#e",transform:"translate(-13.32 67.276)"})),gn||(gn=wt.createElement("path",{d:"M142.516 7.434a8.21 8.21 0 1 0-16.418 0 8.21 8.21 0 1 0 16.418 0Z"})),Nn||(Nn=wt.createElement("path",{d:"M142.516 7.434a8.21 8.21 0 1 0-16.418 0 8.21 8.21 0 1 0 16.418 0Z",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),wn||(wn=wt.createElement("use",{x:117.449,y:-24.7,xlinkHref:"#b",fill:"#fff",transform:"translate(14.117 35.594)"})),bn||(bn=wt.createElement("use",{x:112.717,y:-24.7,xlinkHref:"#f",transform:"translate(8.596 67.276)"})),xn||(xn=wt.createElement("use",{x:112.717,y:-24.7,xlinkHref:"#g",transform:"translate(29.794 67.276)"})),Mn||(Mn=wt.createElement("path",{d:"M108.355-20.969 96.004-.605",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Cn||(Cn=wt.createElement("path",{d:"M95.594.074c.683-.75 1.543-1.394 2.758-2.054-1.387.558-2.067.144-2.215-1.344-.024 1.383-.2 2.441-.543 3.398Z"})),Sn||(Sn=wt.createElement("path",{d:"M95.594.074c.683-.75 1.543-1.394 2.758-2.054-1.387.558-2.067.144-2.215-1.344-.024 1.383-.2 2.441-.543 3.398Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Zn||(Zn=wt.createElement("path",{d:"m88.5 15.422-6.82 20.707",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Ln||(Ln=wt.createElement("path",{d:"M81.43 36.887c.5-.883 1.191-1.703 2.226-2.621-1.226.855-1.98.605-2.46-.813.288 1.356.355 2.426.234 3.434Z"})),Hn||(Hn=wt.createElement("path",{d:"M81.43 36.887c.5-.883 1.191-1.703 2.226-2.621-1.226.855-1.98.605-2.46-.813.288 1.356.355 2.426.234 3.434Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Wn||(Wn=wt.createElement("path",{d:"m93.852 15.39 6.34 18.528",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Rn||(Rn=wt.createElement("path",{d:"M100.45 34.672c-.134-1.008-.079-2.078.195-3.434-.461 1.422-1.215 1.68-2.454.836 1.047.906 1.747 1.719 2.258 2.598Z"})),Tn||(Tn=wt.createElement("path",{d:"M100.45 34.672c-.134-1.008-.079-2.078.195-3.434-.461 1.422-1.215 1.68-2.454.836 1.047.906 1.747 1.719 2.258 2.598Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Bn||(Bn=wt.createElement("path",{d:"M117.078-20.969 129.43-.605",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),On||(On=wt.createElement("path",{d:"M129.844.074c-.348-.957-.523-2.015-.547-3.398-.148 1.488-.828 1.902-2.215 1.344 1.215.66 2.075 1.304 2.762 2.054Z"})),Dn||(Dn=wt.createElement("path",{d:"M129.844.074c-.348-.957-.523-2.015-.547-3.398-.148 1.488-.828 1.902-2.215 1.344 1.215.66 2.075 1.304 2.762 2.054Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),jn||(jn=wt.createElement("path",{d:"m131.691 15.426-6.816 20.824",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),An||(An=wt.createElement("path",{d:"M124.625 37.008c.5-.887 1.187-1.707 2.222-2.63-1.222.86-1.98.61-2.46-.804.289 1.356.359 2.426.238 3.434Z"})),zn||(zn=wt.createElement("path",{d:"M124.625 37.008c.5-.887 1.187-1.707 2.222-2.63-1.222.86-1.98.61-2.46-.804.289 1.356.359 2.426.238 3.434Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})),Kn||(Kn=wt.createElement("path",{d:"m137.016 15.395 6.3 18.52",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),In||(In=wt.createElement("path",{d:"M143.57 34.668c-.129-1.004-.074-2.078.2-3.434-.461 1.422-1.215 1.676-2.45.836 1.043.907 1.742 1.72 2.25 2.598Z"})),Fn||(Fn=wt.createElement("path",{d:"M143.57 34.668c-.129-1.004-.074-2.078.2-3.434-.461 1.422-1.215 1.676-2.45.836 1.043.907 1.742 1.72 2.25 2.598Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})))};var Vn,Pn,_n,Gn,Qn,Xn,Yn,Jn,$n,ea,ta,na,aa,ra,ia,la,oa,sa,ca,ma,da,pa,ha,ka,ua,fa,ya,Ea,va,ga,Na,wa,ba,xa,Ma,Ca,Sa,Za,La,Ha,Wa,Ra,Ta;function Ba(){return Ba=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Ba.apply(this,arguments)}const Oa=e=>{let{title:t,titleId:n,...a}=e;return wt.createElement("svg",Ba({xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",width:289.741,height:109.481,viewBox:"-72 -72 217.306 82.111","aria-labelledby":n},a),t?wt.createElement("title",{id:n},t):null,Vn||(Vn=wt.createElement("defs",null,wt.createElement("path",{id:"r",d:"M.324-.423c-.05.05-.05.06-.05.144v.04c0 .18.055.239.24.239h1.708c.189 0 .239-.065.239-.24v-.059c0-.08 0-.174-.105-.22-.035-.019-.194-.019-.294-.019-.11 0-.229.005-.338.005H.917l.657-.623c.075-.064.264-.219.339-.289.274-.269.548-.533.548-.976 0-.608-.439-1.146-1.17-1.146-.175 0-.46.025-.698.22a1.046 1.046 0 0 0-.364.547l.25.32c.03.04.044.06.079.06.045 0 .055-.036.07-.096.1-.343.269-.552.587-.552.389 0 .548.353.548.657 0 .319-.189.653-.488.971L.324-.423Z"}),wt.createElement("path",{id:"v",d:"M.478-2.765c.04.06.065.06.075.06.035 0 .045-.02.07-.055.254-.363.607-.363.672-.363.319 0 .364.164.364.408 0 .07 0 .309-.155.498-.12.14-.244.15-.393.16-.055.005-.15.01-.165.02-.034.015-.034.044-.034.124v.09c0 .13.005.134.134.134h.22c.453 0 .507.284.507.668 0 .334-.035.662-.488.662a1.26 1.26 0 0 1-.862-.348c-.044-.045-.05-.05-.07-.05-.05 0-.06.045-.064.055 0 .005-.06.318-.06.343C.23-.294.658.11 1.31.11c.857 0 1.196-.459 1.196-1.121 0-.449-.24-.752-.688-.867.404-.22.538-.543.538-.827 0-.797-.712-.862-1.036-.862-.682 0-1.016.489-1.016.528 0 .03.03.07.035.075l.14.2Z"}),wt.createElement("path",{id:"q",d:"M1.086-2.147c0-.13-.005-.134-.135-.134H.568c-.13 0-.135.005-.135.134v.384c0 .13.005.134.135.134H.95c.13 0 .135-.005.135-.134v-.384ZM.433-.134c0 .129.005.134.135.134H.95c.13 0 .135-.005.135-.134v-.384c0-.13-.005-.135-.135-.135H.568c-.13 0-.135.005-.135.135v.384Z"}),wt.createElement("path",{id:"p",d:"M2.311-1.574c0-.787-.757-.792-1.006-.792-.234 0-.483.02-.817.16-.104.044-.13.06-.13.114 0 .035.03.324.036.363.005.03.03.055.064.055.025 0 .04-.015.055-.03.214-.224.463-.333.772-.333.27 0 .349.164.349.458v.174c-.174 0-1.48.01-1.48.742a.72.72 0 0 0 .718.718c.17 0 .543-.05.777-.394v.1c0 .16.035.239.239.239h.184c.19 0 .24-.065.24-.24v-1.334Zm-.677.807c0 .463-.473.463-.488.463-.21 0-.344-.18-.344-.368 0-.489.692-.524.832-.528v.433Z"}),wt.createElement("path",{id:"u",d:"M.966-3.218c0-.16-.034-.239-.239-.239H.543c-.18 0-.24.055-.24.24V-.24c0 .18.056.239.24.239h.2C.826 0 .975 0 .98-.194c.23.249.484.249.563.249 1.061 0 1.061-.957 1.061-1.206 0-.239 0-1.185-.936-1.185a.99.99 0 0 0-.703.279v-1.16Zm.015 1.415a.65.65 0 0 1 .444-.175c.503 0 .503.459.503.832 0 .369 0 .842-.558.842A.489.489 0 0 1 .98-.498v-1.305Z"}),wt.createElement("path",{id:"n",d:"M6.416-1.576c-.879.642-.997 1.555-.997 1.562 0 .105.07.105.167.105.126 0 .147 0 .181-.119a2.17 2.17 0 0 1 .516-1.004c.405-.426.754-.53 1.047-.62a.103.103 0 0 0 .07-.091c0-.07-.043-.084-.133-.112-1.004-.32-1.36-1.032-1.507-1.646-.027-.084-.076-.084-.174-.084s-.167 0-.167.105c0 .014.07.481.411.962.16.238.356.433.586.6h-5.6c-.112 0-.279 0-.279.168 0 .174.16.174.279.174h5.6Z"}),wt.createElement("path",{id:"m",d:"M.879-1.576c.216 0 .216-.154.216-.167 0-.077-.042-.175-.216-.175v-.892c0-.098 0-.272-.168-.272-.174 0-.174.167-.174.272v2.127c0 .104 0 .272.174.272.168 0 .168-.175.168-.272v-.893Z"}),wt.createElement("path",{id:"l",d:"M2.943-2.664c-.146-.23-.384-.411-.718-.411-.893 0-1.8.983-1.8 1.987C.425-.41.88.07 1.478.07c.377 0 .712-.216.99-.488.133.418.538.488.719.488.251 0 .425-.154.551-.37.153-.272.244-.67.244-.697 0-.09-.09-.09-.112-.09-.097 0-.104.027-.153.215-.084.335-.216.746-.509.746-.181 0-.23-.153-.23-.341 0-.119.056-.37.104-.551.05-.188.119-.474.154-.628l.14-.53c.041-.181.125-.509.125-.544 0-.153-.126-.223-.237-.223a.338.338 0 0 0-.321.279ZM2.497-.872c-.05.196-.203.335-.356.468-.063.055-.342.278-.642.278-.258 0-.509-.18-.509-.676 0-.37.203-1.137.363-1.416.32-.558.676-.662.872-.662.488 0 .62.53.62.607a.402.402 0 0 1-.02.097L2.496-.872Z"}),wt.createElement("path",{id:"s",d:"M1.841-4.63a.867.867 0 0 0 .028-.112c0-.035-.028-.098-.112-.098-.14 0-.718.056-.892.07-.056.007-.154.014-.154.16 0 .098.098.098.182.098.334 0 .334.049.334.105 0 .048-.07.327-.111.488l-.16.641C.892-3.04.508-1.513.495-1.423.46-1.255.46-1.165.46-1.08.46-.377.907.07 1.485.07c.872 0 1.8-.948 1.8-1.98 0-.816-.565-1.164-1.046-1.164-.363 0-.67.202-.88.383l.482-1.939ZM1.492-.127c-.341 0-.537-.3-.537-.71 0-.259.063-.496.258-1.284.042-.133.042-.147.175-.3.265-.307.579-.46.83-.46.272 0 .509.202.509.676 0 .286-.154.998-.363 1.402-.167.342-.516.676-.872.676Z"}),wt.createElement("path",{id:"j",d:"M6.565-2.291c.17 0 .35 0 .35-.2s-.18-.199-.35-.199h-5.39c-.169 0-.348 0-.348.2s.18.199.349.199h5.39Z"}),wt.createElement("path",{id:"k",d:"M8.309-2.291c-.548.418-.817.826-.897.956-.448.687-.528 1.315-.528 1.325 0 .12.12.12.2.12.169 0 .179-.02.219-.2.229-.976.817-1.813 1.942-2.271.12-.04.15-.06.15-.13s-.06-.1-.08-.11c-.438-.169-1.644-.667-2.022-2.34-.03-.12-.04-.15-.21-.15-.08 0-.199 0-.199.12 0 .02.09.647.508 1.315.2.299.488.647.917.966H.907c-.18 0-.36 0-.36.2s.18.199.36.199h7.402Z"}),wt.createElement("path",{id:"i",d:"M1.527-.398a.399.399 0 0 0-.397-.404.399.399 0 0 0-.405.398c0 .244.196.404.398.404a.399.399 0 0 0 .404-.398Z"}),wt.createElement("path",{id:"o",d:"M3.522-1.27h-.237c-.021.154-.091.566-.182.635-.055.042-.592.042-.69.042H1.13c.732-.648.976-.844 1.395-1.171.516-.412.997-.844.997-1.507 0-.844-.74-1.36-1.632-1.36-.865 0-1.45.607-1.45 1.249 0 .355.3.39.369.39.167 0 .37-.118.37-.37 0-.125-.05-.369-.412-.369.216-.495.69-.649 1.018-.649.698 0 1.06.544 1.06 1.11 0 .606-.432 1.087-.655 1.338L.51-.272C.44-.209.44-.195.44 0h2.873l.209-1.27Z"}),wt.createElement("path",{id:"t",d:"M1.904-2.33c.544 0 .934.377.934 1.124 0 .864-.502 1.122-.906 1.122-.28 0-.893-.076-1.186-.488.328-.014.405-.244.405-.39a.374.374 0 0 0-.384-.384c-.195 0-.39.119-.39.405 0 .655.725 1.08 1.569 1.08.97 0 1.639-.648 1.639-1.345 0-.544-.447-1.088-1.214-1.249.732-.265.997-.788.997-1.213 0-.551-.634-.963-1.408-.963s-1.367.377-1.367.935c0 .237.153.37.362.37.217 0 .356-.16.356-.356 0-.202-.14-.349-.356-.363.245-.307.726-.383.984-.383.314 0 .753.153.753.76 0 .293-.098.613-.279.83-.23.265-.425.279-.774.3-.174.013-.188.013-.223.02-.014 0-.07.014-.07.091 0 .098.063.098.181.098h.377Z"}),wt.createElement("path",{id:"f",d:"M1.471-4.303a.403.403 0 0 0-.404-.397.397.397 0 0 0-.398.397c0 .251.203.405.398.405a.4.4 0 0 0 .404-.405ZM.411-2.999v.251c.44 0 .503.042.503.384v1.813c0 .3-.07.3-.523.3V0c.013 0 .502-.028.78-.028.245 0 .496.007.74.028v-.251c-.405 0-.474 0-.474-.293v-2.531L.41-3Z"}),wt.createElement("path",{id:"g",d:"M3.592-2.113c0-.607-.3-.962-1.047-.962-.571 0-.941.313-1.136.676h-.007v-.676L.377-3v.251c.467 0 .523.05.523.39V-.55c0 .3-.07.3-.523.3V0c.014 0 .502-.028.795-.028.258 0 .739.021.802.028v-.251c-.454 0-.523 0-.523-.3v-1.255c0-.732.578-1.074 1.039-1.074.488 0 .55.383.55.739v1.59c0 .3-.07.3-.522.3V0c.014 0 .502-.028.795-.028.258 0 .739.021.802.028v-.251c-.454 0-.523 0-.523-.3v-1.562Z"}),wt.createElement("path",{id:"h",d:"M2.643-2.929c0-.119 0-.181-.098-.181-.034 0-.048 0-.139.083-.014.007-.084.07-.126.105-.209-.146-.474-.188-.732-.188-.997 0-1.234.523-1.234.871 0 .224.097.405.265.544.265.23.53.28.962.349.349.063.914.16.914.628 0 .272-.188.592-.858.592S.683-.565.557-1.039c-.02-.09-.027-.119-.125-.119-.118 0-.118.05-.118.189v.857c0 .119 0 .182.097.182.063 0 .196-.147.335-.3.307.286.684.3.851.3.907 0 1.241-.488 1.241-.984a.852.852 0 0 0-.3-.641c-.265-.244-.585-.3-.83-.342-.557-.098-1.01-.181-1.01-.55 0-.224.188-.496.85-.496.81 0 .844.565.858.767.007.077.09.077.119.077.118 0 .118-.049.118-.181v-.649Z"}),wt.createElement("path",{id:"a",d:"M1.355-.777c0 .359-.02.468-.787.468h-.24V0h5.75l.418-2.57h-.25C5.999-1.036 5.769-.31 4.056-.31H2.73c-.468 0-.488-.07-.488-.398v-2.66h.896c.967 0 1.076.318 1.076 1.165h.25v-2.64h-.25c0 .857-.11 1.166-1.076 1.166h-.896v-2.391c0-.329.02-.399.488-.399h1.285c1.524 0 1.793.548 1.953 1.933h.249l-.28-2.242H.33v.31h.239c.767 0 .787.109.787.467v5.22Z"}),wt.createElement("path",{id:"b",d:"M1.096-3.427v2.67c0 .448-.11.448-.777.448V0c.348-.01.857-.03 1.126-.03.259 0 .777.02 1.115.03v-.309c-.667 0-.777 0-.777-.448V-2.59c0-1.036.708-1.594 1.345-1.594.628 0 .738.538.738 1.106v2.32c0 .45-.11.45-.778.45V0c.35-.01.857-.03 1.126-.03.26 0 .777.02 1.116.03v-.309c-.667 0-.777 0-.777-.448V-2.59c0-1.036.707-1.594 1.345-1.594.628 0 .737.538.737 1.106v2.32c0 .45-.11.45-.777.45V0c.349-.01.857-.03 1.126-.03.259 0 .777.02 1.116.03v-.309c-.518 0-.767 0-.777-.299V-2.51c0-.856 0-1.165-.31-1.524-.139-.17-.468-.368-1.045-.368-.837 0-1.276.597-1.445.976-.14-.867-.877-.976-1.325-.976-.727 0-1.196.428-1.474 1.046v-1.046l-1.405.11v.308c.697 0 .777.07.777.558Z"}),wt.createElement("path",{id:"c",d:"M1.714-3.746v-.657l-1.435.11v.308c.707 0 .777.06.777.498v4.663c0 .448-.11.448-.777.448v.309c.339-.01.857-.03 1.116-.03.269 0 .777.02 1.126.03v-.31c-.668 0-.778 0-.778-.447V-.588c.05.16.469.698 1.226.698C4.154.11 5.19-.867 5.19-2.152c0-1.265-.967-2.251-2.083-2.251-.777 0-1.195.438-1.394.657Zm.03 2.61v-2.221c.288-.509.777-.797 1.285-.797.727 0 1.335.876 1.335 2.002 0 1.206-.698 2.042-1.435 2.042-.398 0-.777-.199-1.046-.607-.14-.21-.14-.22-.14-.419Z"}),wt.createElement("path",{id:"d",d:"M1.724-3.985h1.424v-.309H1.724v-1.833h-.25c-.01.817-.308 1.883-1.285 1.923v.219h.847v2.75C1.036-.01 1.963.11 2.321.11c.708 0 .987-.708.987-1.345v-.568h-.25v.548c0 .737-.298 1.116-.667 1.116-.667 0-.667-.907-.667-1.076v-2.77Z"}),wt.createElement("path",{id:"e",d:"M4.134-3.347c.26-.628.768-.638.927-.638v-.309c-.23.02-.518.03-.747.03-.18 0-.648-.02-.867-.03v.309c.309.01.468.18.468.428 0 .1-.01.12-.06.24L2.85-.868l-1.106-2.68c-.04-.1-.06-.14-.06-.179 0-.26.37-.26.559-.26v-.308c-.26.01-.917.03-1.086.03-.27 0-.668-.01-.967-.03v.309c.478 0 .668 0 .807.349L2.491 0c-.05.13-.19.458-.25.588-.219.548-.498 1.235-1.135 1.235-.05 0-.28 0-.468-.18.308-.039.388-.258.388-.418A.403.403 0 0 0 .608.807c-.2 0-.419.13-.419.428 0 .449.419.807.917.807.627 0 1.036-.568 1.275-1.135l1.753-4.254Z"}))),Pn||(Pn=wt.createElement("path",{fill:"#fff",d:"M-72-72h217.306v82.111H-72z"})),_n||(_n=wt.createElement("use",{x:-41.887,y:-28.554,xlinkHref:"#a"})),Gn||(Gn=wt.createElement("use",{x:-35.106,y:-28.554,xlinkHref:"#b"})),Qn||(Qn=wt.createElement("use",{x:-26.804,y:-28.554,xlinkHref:"#c"})),Xn||(Xn=wt.createElement("use",{x:-21.269,y:-28.554,xlinkHref:"#d"})),Yn||(Yn=wt.createElement("use",{x:-17.672,y:-28.554,xlinkHref:"#e"})),Jn||(Jn=wt.createElement("use",{x:-1.315,y:-32.718,xlinkHref:"#f"})),$n||($n=wt.createElement("use",{x:.94,y:-32.718,xlinkHref:"#g"})),ea||(ea=wt.createElement("use",{x:5.341,y:-32.718,xlinkHref:"#h"})),ta||(ta=wt.createElement("use",{x:8.497,y:-32.718,xlinkHref:"#i"})),na||(na=wt.createElement("use",{x:-7.254,y:-27.071,xlinkHref:"#j"})),aa||(aa=wt.createElement("use",{x:-2.35,y:-27.071,xlinkHref:"#j"})),ra||(ra=wt.createElement("use",{x:3.185,y:-27.071,xlinkHref:"#j"})),ia||(ia=wt.createElement("use",{x:8.089,y:-27.071,xlinkHref:"#k"})),la||(la=wt.createElement("use",{x:-4.76,y:-20.916,xlinkHref:"#l"})),oa||(oa=wt.createElement("use",{x:.922,y:-20.916,xlinkHref:"#m"})),sa||(sa=wt.createElement("use",{x:.922,y:-20.916,xlinkHref:"#n"})),ca||(ca=wt.createElement("use",{x:10.226,y:-20.916,xlinkHref:"#o"})),ma||(ma=wt.createElement("path",{d:"M40.129-32.738a7.652 7.652 0 0 0-7.652-7.653c-4.227 0-7.653 3.426-7.653 7.653s3.426 7.652 7.653 7.652a7.652 7.652 0 0 0 7.652-7.652Z",fill:"red"})),da||(da=wt.createElement("path",{d:"M40.129-32.738a7.652 7.652 0 0 0-7.652-7.653c-4.227 0-7.653 3.426-7.653 7.653s3.426 7.652 7.653 7.652a7.652 7.652 0 0 0 7.652-7.652Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),pa||(pa=wt.createElement("g",{fill:"#fff",transform:"translate(-7.472)"},wt.createElement("use",{x:35.597,y:-31.008,xlinkHref:"#p"}),wt.createElement("use",{x:39.125,y:-31.008,xlinkHref:"#q"}),wt.createElement("use",{x:41.561,y:-31.008,xlinkHref:"#r"}))),ha||(ha=wt.createElement("use",{x:56.285,y:-32.718,xlinkHref:"#f"})),ka||(ka=wt.createElement("use",{x:58.54,y:-32.718,xlinkHref:"#g"})),ua||(ua=wt.createElement("use",{x:62.94,y:-32.718,xlinkHref:"#h"})),fa||(fa=wt.createElement("use",{x:66.097,y:-32.718,xlinkHref:"#i"})),ya||(ya=wt.createElement("use",{x:50.755,y:-27.071,xlinkHref:"#j"})),Ea||(Ea=wt.createElement("use",{x:55.25,y:-27.071,xlinkHref:"#j"})),va||(va=wt.createElement("use",{x:60.785,y:-27.071,xlinkHref:"#j"})),ga||(ga=wt.createElement("use",{x:65.28,y:-27.071,xlinkHref:"#k"})),Na||(Na=wt.createElement("use",{x:53.249,y:-20.567,xlinkHref:"#s"})),wa||(wa=wt.createElement("use",{x:58.113,y:-20.567,xlinkHref:"#m"})),ba||(ba=wt.createElement("use",{x:58.113,y:-20.567,xlinkHref:"#n"})),xa||(xa=wt.createElement("use",{x:67.416,y:-20.567,xlinkHref:"#t"})),Ma||(Ma=wt.createElement("path",{d:"M98.137-49.977a7.651 7.651 0 1 0-15.3 0 7.651 7.651 0 1 0 15.3 0Z",fill:"red"})),Ca||(Ca=wt.createElement("path",{d:"M98.137-49.977a7.651 7.651 0 1 0-15.3 0 7.651 7.651 0 1 0 15.3 0Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Sa||(Sa=wt.createElement("g",{fill:"#fff",transform:"translate(-7.472)"},wt.createElement("use",{x:93.606,y:-48.247,xlinkHref:"#p"}),wt.createElement("use",{x:97.134,y:-48.247,xlinkHref:"#q"}),wt.createElement("use",{x:99.57,y:-48.247,xlinkHref:"#r"}))),Za||(Za=wt.createElement("path",{d:"M109.277-15.5a7.652 7.652 0 0 0-7.652-7.652c-4.227 0-7.653 3.425-7.653 7.652s3.426 7.652 7.653 7.652a7.652 7.652 0 0 0 7.652-7.652Z",fill:"red"})),La||(La=wt.createElement("path",{d:"M109.277-15.5a7.652 7.652 0 0 0-7.652-7.652c-4.227 0-7.653 3.425-7.653 7.652s3.426 7.652 7.653 7.652a7.652 7.652 0 0 0 7.652-7.652Z",stroke:"red",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Ha||(Ha=wt.createElement("g",{fill:"#fff",transform:"translate(3.666 34.477)"},wt.createElement("use",{x:93.516,y:-48.247,xlinkHref:"#u"}),wt.createElement("use",{x:97.224,y:-48.247,xlinkHref:"#q"}),wt.createElement("use",{x:99.66,y:-48.247,xlinkHref:"#v"}))),Wa||(Wa=wt.createElement("path",{d:"m92.898-42.508 6.008 18.59",stroke:"#000",fill:"none",strokeWidth:.399,strokeMiterlimit:10})),Ra||(Ra=wt.createElement("path",{d:"M99.148-23.16c-.117-1.008-.043-2.078.254-3.43-.484 1.414-1.246 1.656-2.465.797 1.032.922 1.715 1.746 2.211 2.633Z"})),Ta||(Ta=wt.createElement("path",{d:"M99.148-23.16c-.117-1.008-.043-2.078.254-3.43-.484 1.414-1.246 1.656-2.465.797 1.032.922 1.715 1.746 2.211 2.633Z",stroke:"#000",fill:"none",strokeWidth:.398,strokeMiterlimit:10,strokeLinejoin:"bevel"})))},Da={sidebar_position:1},ja="Functors",Aa={unversionedId:"concepts/modules/functors",id:"concepts/modules/functors",title:"Functors",description:"By Cooper Pierce and Brandon Wu, February 2021",source:"@site/docs/concepts/modules/functors.mdx",sourceDirName:"concepts/modules",slug:"/concepts/modules/functors",permalink:"/book/docs/concepts/modules/functors",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Modules",permalink:"/book/docs/concepts/modules/"},next:{title:"Sequences",permalink:"/book/docs/concepts/sequences"}},za={},Ka=[{value:"Functors: The Basics",id:"functors-the-basics",level:2},{value:"Functors: Syntactic Sugar",id:"functors-syntactic-sugar",level:2},{value:"Case study: Typeclasses",id:"case-study-typeclasses",level:2},{value:"Case study: Red-black trees",id:"case-study-red-black-trees",level:2},{value:"Conclusions",id:"conclusions",level:2}],Ia={toc:Ka};function Fa(e){let{components:t,...n}=e;return(0,bt.kt)("wrapper",(0,Nt.Z)({},Ia,n,{components:t,mdxType:"MDXLayout"}),(0,bt.kt)("h1",{id:"functors"},"Functors"),(0,bt.kt)("p",null,(0,bt.kt)("em",{parentName:"p"},"By Cooper Pierce and Brandon Wu, February 2021")),(0,bt.kt)("p",null,"We have so far discussed the usage of modules for explicitly structuring our code, in that we are afforded a degree of ",(0,bt.kt)("em",{parentName:"p"},"modularity"),' in how the different components of some software can fit together. We have used language like "swapping out" modules or "substituting" modules for one another, but this is very imprecise. What exactly do we mean when we say to swap one module for another? Certainly, it would be messy to have to go through our code and change every mention of ',(0,bt.kt)("inlineCode",{parentName:"p"},"StructureA")," for ",(0,bt.kt)("inlineCode",{parentName:"p"},"StructureB"),", and we would like to avoid some kind of global change that requires an extenuous amount of effort on the client's part."),(0,bt.kt)("p",null,'Going through and changing every mention of a particular structure in order to achieve "modularization" is akin to saying that using a particular higher-order function by replacing specifically what each function parameter is in each invocation is how we can achieve "parameterization" in the function argument. In reality, this does not offer any more versatility. In this chapter, we will discuss ',(0,bt.kt)("em",{parentName:"p"},"functors"),", which are akin to ",(0,bt.kt)("em",{parentName:"p"},"higher-order modules"),", which are allowed to take other modules in as arguments."),(0,bt.kt)("h2",{id:"functors-the-basics"},"Functors: The Basics"),(0,bt.kt)("p",null,"Firstly, consider the signature of a stack."),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"signature STACK =\nsig\n    type 'a t\n\n    val push : 'a t -> 'a -> 'a t\n    val pop : 'a t -> 'a option * 'a t\n    val size : 'a t -> int\n    val empty : 'a t\nend\n")),(0,bt.kt)("p",null,"Suppose that we would like to ",(0,bt.kt)("em",{parentName:"p"},"extend")," the definition of a stack such that it has a limit on how many elements that it contains. However, we don't necessarily know which implementation of a stack to use - there could be several such existing implementations, so we would like to instead make our ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack")," structure a ",(0,bt.kt)("em",{parentName:"p"},"parameter of")," an existing structure ascribing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"STACK"),"."),(0,bt.kt)("p",null,"We will then use a very similar signature to ",(0,bt.kt)("inlineCode",{parentName:"p"},"STACK")," called ",(0,bt.kt)("inlineCode",{parentName:"p"},"BOUNDED_STACK"),", which is the exact same except for having an ",(0,bt.kt)("inlineCode",{parentName:"p"},"exception Full")," for use if a stack is given too many elements."),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"signature BOUNDED_STACK =\nsig\n    type 'a t\n    exception Full\n\n    val push : 'a t -> 'a -> 'a t\n    val pop : 'a t -> 'a option * 'a t\n    val size : 'a t -> int\n    val empty : 'a t\nend\n")),(0,bt.kt)("p",null,"We first consider the case where we have a hard limit of 10 items in a given stack."),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"functor BoundedStack (S : STACK) :> BOUNDED_STACK =\nstruct\n    type 'a t = 'a S.t\n\n    val limit = 10\n    exception Full\n\n    fun push S x =\n        if S.size S >= limit\n          then raise Full\n          else S.push S x\n\n    fun pop S = S.pop S\n\n    fun size S = S.size S\n\n    val empty = S.empty\nend\n")),(0,bt.kt)("p",null,"We see that most of this code is duplicated - we have based the majority of the design of this ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack")," in terms of ",(0,bt.kt)("inlineCode",{parentName:"p"},"S"),", which is the given implementation of a stack. The correctness of a ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack")," is thus totally dependent on whether or not the given ",(0,bt.kt)("inlineCode",{parentName:"p"},"S")," is correct, but we achieve ",(0,bt.kt)("em",{parentName:"p"},"modularity")," in that we can freely swap out a structure ascribing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"STACK")," for another when instantiating a given ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack"),"."),(0,bt.kt)("p",null,"To put it concretely, suppose that we have two structures:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"structure Stack1 :> STACK =\nstruct\n    (* some code here *)\nend\n\nstructure Stack2 :> STACK =\nstruct\n    (* some code here *)\nend\n")),(0,bt.kt)("p",null,"Then we can create instances of the ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack")," functor as follows:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"structure BoundedStack1 = BoundedStack(Stack1)\nstructure BoundedStack2 = BoundedStack(Stack2)\n")),(0,bt.kt)("p",null,(0,bt.kt)("strong",{parentName:"p"},"NOTE"),": SML functors are ",(0,bt.kt)("em",{parentName:"p"},"generative"),", meaning that applying the same functor to the same structure twice yields two unique structures. As such, if we had ",(0,bt.kt)("inlineCode",{parentName:"p"},"structure BS1 = BoundedStack(Stack1)")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"structure BS2 = BoundedStack(Stack1)"),", then the types ",(0,bt.kt)("inlineCode",{parentName:"p"},"BS1.t")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"BS2.t"),' are recognized as being two distinct types, despite the fact that they are "constructed" in the same manner.'),(0,bt.kt)("p",null,(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack1")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack2")," implement ",(0,bt.kt)("inlineCode",{parentName:"p"},"BOUNDED_STACK"),", so they all can access the fields of the ",(0,bt.kt)("inlineCode",{parentName:"p"},"BOUNDED_STACK")," signature. Presumably, the only change they display from ",(0,bt.kt)("inlineCode",{parentName:"p"},"Stack1")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"Stack2")," are in raising the exception ",(0,bt.kt)("inlineCode",{parentName:"p"},"Full")," when the stack is given more than ten elements."),(0,bt.kt)("h2",{id:"functors-syntactic-sugar"},"Functors: Syntactic Sugar"),(0,bt.kt)("p",null,'SML offers some "syntactic sugar" for functor arguments, allowing us to (seemingly) parameterize them by terms other than structures. It is a little unsavory to have to hard code the limit of the ',(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack")," within the functor itself, rather than having it be parameterized by the limit itself, so we can actually also write the following:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"functor BoundedStack (structure S : STACK\n                      val limit : int) :> BOUNDED_STACK =\nstruct\n    type 'a t = 'a S.t\n\n    exception Full\n\n    fun push S x =\n        if S.size S >= limit\n          then raise Full\n          else S.push S x\n\n    fun pop S = S.pop S\n\n    fun size S = S.size S\n\n    val empty = S.empty\nend\n")),(0,bt.kt)("p",null,"The only difference is that instead of taking in a single ",(0,bt.kt)("inlineCode",{parentName:"p"},"S : STACK"),', we specify "',(0,bt.kt)("inlineCode",{parentName:"p"},"structure S : STACK val limit : int"),"\" within the parentheses of the functor's input. Note that there are no commas or delimiters other than spaces."),(0,bt.kt)("p",null,"In reality, this is something of a lie. While this seems to give the impression that ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack")," is taking in ",(0,bt.kt)("em",{parentName:"p"},"two")," things, a structure named ",(0,bt.kt)("inlineCode",{parentName:"p"},"S")," ascribing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"STACK")," and a value of type int named ",(0,bt.kt)("inlineCode",{parentName:"p"},"limit"),", in reality functors can only take in other structures. This is thus ",(0,bt.kt)("em",{parentName:"p"},"syntactic sugar")," for the following code:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"functor BoundedStack (UnnamedStructure :\n                      sig\n                        structure S : STACK\n                        val limit : int\n                      end) :> BOUNDED_STACK =\nstruct\n    open UnnamedStructure\n    (* same code as before *)\nend\n")),(0,bt.kt)("p",null,"The ",(0,bt.kt)("inlineCode",{parentName:"p"},"open")," keyword specifies to ",(0,bt.kt)("em",{parentName:"p"},"open")," the namespace within a given module, effectively promoting all contents of it to the top level. Thus, if we were to ",(0,bt.kt)("inlineCode",{parentName:"p"},"open Stack1"),", as per our previous example, we could write ",(0,bt.kt)("inlineCode",{parentName:"p"},"push")," instead of ",(0,bt.kt)("inlineCode",{parentName:"p"},"Stack1.push"),", ",(0,bt.kt)("inlineCode",{parentName:"p"},"pop")," instead of ",(0,bt.kt)("inlineCode",{parentName:"p"},"Stack1.pop"),", and so on and so forth. Thus, what this syntactic sugar does is specify to take in a ",(0,bt.kt)("em",{parentName:"p"},"single structure")," ascribing to a signature that ",(0,bt.kt)("em",{parentName:"p"},"contains")," a structure ascribing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"STACK")," and an int-typed value, named ",(0,bt.kt)("inlineCode",{parentName:"p"},"S")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"limit")," respectively."),(0,bt.kt)("p",null,(0,bt.kt)("strong",{parentName:"p"},"CAUTION"),": This is a very important point to cognize! This can be the source of many frustrated hours of debugging due to a simple syntax error."),(0,bt.kt)("p",null,"The reason why we must ",(0,bt.kt)("inlineCode",{parentName:"p"},"open UnnamedStructure")," in order to be able to use the same code is because we cannot say ",(0,bt.kt)("inlineCode",{parentName:"p"},"S.push"),", for instance, as we did in the original implementation of ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack"),". We would instead have to specify ",(0,bt.kt)("inlineCode",{parentName:"p"},"UnnamedStructure.S.push"),", which is not what our previous code says. However, if we ",(0,bt.kt)("inlineCode",{parentName:"p"},"open UnnamedStructure")," first, the ",(0,bt.kt)("inlineCode",{parentName:"p"},"S")," structure is promoted to the top level, and we can now access it without first having to go through ",(0,bt.kt)("inlineCode",{parentName:"p"},"UnnamedStructure"),"."),(0,bt.kt)("p",null,"The reason for naming the input structure ",(0,bt.kt)("inlineCode",{parentName:"p"},"UnnamedStructure")," should hopefully now be clear. Indeed, it is a ",(0,bt.kt)("em",{parentName:"p"},"phantom structure")," of a sort, since in the syntactic sugar case, we never give it a name, and indeed we never really acknowledge its existence at all. Yet it is important to realize what is really happening, that there really ",(0,bt.kt)("em",{parentName:"p"},"is")," a structure being taken in as input, and then immediately opened for its contents."),(0,bt.kt)("p",null,"What issues can occur if we forget about the existence of this syntactic sugar? Consider the following code:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"functor BoundedStack (structure S : STACK) :> BOUNDED_STACK =\nstruct\n    type 'a t = 'a S.t\n\n    val limit = 10\n    exception Full\n\n    fun push S x =\n        if S.size S >= limit\n          then raise Full\n          else S.push S x\n\n    fun pop S = S.pop S\n\n    fun size S = S.size S\n\n    val empty = S.empty\n\nend\n\nstructure BoundedStack1 = BoundedStack(Stack1)\nstructure BoundedStack2 = BoundedStack(Stack2)\n")),(0,bt.kt)("p",null,"This code ",(0,bt.kt)("em",{parentName:"p"},"will not compile!")," Can you see why?"),(0,bt.kt)("p",null,"The issue is that we have added a prefix of ",(0,bt.kt)("inlineCode",{parentName:"p"},"structure")," to ",(0,bt.kt)("inlineCode",{parentName:"p"},"S : STACK")," within the inputs. Even though we have only specified one field, not including the ",(0,bt.kt)("inlineCode",{parentName:"p"},"limit")," as a parameter, this will be interpreted as the following:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"functor BoundedStack (UnnamedStructure :\n                      sig\n                        structure S : STACK\n                      end) :> BOUNDED_STACK =\nstruct\n    type 'a t = 'a S.t\n\n    val limit = 10\n    exception Full\n\n    fun push S x =\n        if S.size S >= limit\n          then raise Full\n          else S.push S x\n\n    fun pop S = S.pop S\n\n    fun size S = S.size S\n\n    val empty = S.empty\n\nend\n\nstructure BoundedStack1 = BoundedStack(Stack1)\nstructure BoundedStack2 = BoundedStack(Stack2)\n")),(0,bt.kt)("p",null,"Thus, ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack")," is no longer a functor taking in a structure ascribing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"STACK"),", but a functor taking in a structure ascribing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"sig structure S: STACK end"),". In other words, taking in a structure ",(0,bt.kt)("em",{parentName:"p"},"containing")," a structure ascrbing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"STACK"),"! Thus, the line ",(0,bt.kt)("inlineCode",{parentName:"p"},"structure BoundedStack1 = BoundedStack(Stack1)")," will not type-check, as ",(0,bt.kt)("inlineCode",{parentName:"p"},"Stack1")," does not ascribe to the same signature that ",(0,bt.kt)("inlineCode",{parentName:"p"},"BoundedStack")," is expecting. This one simple syntax error can be the source of much pain and frustration, so we caution the reader to be particular with their syntax, and mindful of what is really happening under the hood."),(0,bt.kt)("h2",{id:"case-study-typeclasses"},"Case study: Typeclasses"),(0,bt.kt)("p",null,"Certain types have some functionality or operation in common. Depending on the operation in question, we can say that these types fall into the same ",(0,bt.kt)("em",{parentName:"p"},"typeclass"),", which is a common interface consisting of a type and the desired operations. Note that typeclass membership is not a formally defined relationship, but instead a useful categorization that we use in order to classify types that we intend to parameterize some implementation over."),(0,bt.kt)("p",null,"For a concrete example of a typeclass, consider the ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED")," typeclass."),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"signature ORDERED =\nsig\n    type t\n    val compare : t * t -> order\nend\n")),(0,bt.kt)("p",null,"The ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED")," typeclass consists of those types that admit a ",(0,bt.kt)("em",{parentName:"p"},"sensible ordering"),", which we will not (and perhaps cannot) define. Thus, we can witness ",(0,bt.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"string")," as valid instances of the ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED")," typeclass with the following structures:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"structure IntOrder : ORDERED =\nstruct\n    type t = int\n    val compare = Int.compare\nend\n\nstructure StringOrder : ORDERED =\nstruct\n    type t = string\n    val compare = String.compare\nend\n")),(0,bt.kt)("p",null,"Note that it is useful, in this case, for our instances of the ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED")," typeclass to be ",(0,bt.kt)("em",{parentName:"p"},"transparently ascribed"),", since it is the whole point that we are aware of the type that the typeclass is associated with."),(0,bt.kt)("p",null,(0,bt.kt)("strong",{parentName:"p"},"NOTE"),": In actuality, we use transparent ascription as somewhat of a sledgehammer to avoid having to talk about a different language construct, namely ",(0,bt.kt)("inlineCode",{parentName:"p"},"where")," clauses. A ",(0,bt.kt)("inlineCode",{parentName:"p"},"where")," clause modifies a signature containing an abstract type, and concretely specifies what that type should be. For instance, we could discuss the signature ",(0,bt.kt)("inlineCode",{parentName:"p"},"signature ORDERED type t end where type t = int"),'. A structure ascribing to this signature would "publish" the details of the type ',(0,bt.kt)("inlineCode",{parentName:"p"},"t")," (which is really an ",(0,bt.kt)("inlineCode",{parentName:"p"},"int"),"), the same way that transparent ascription would. With ",(0,bt.kt)("inlineCode",{parentName:"p"},"where"),' clauses, however, if there are multiple abstract types, we can be selective about which ones that are made "transparent". For the purposes of this chapter, however, we will largely avoid ',(0,bt.kt)("inlineCode",{parentName:"p"},"where")," clauses."),(0,bt.kt)("p",null,"These definitions come very naturally from the fact that the ",(0,bt.kt)("inlineCode",{parentName:"p"},"String")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"Int")," libraries included with the Standard ML basis library already implement ",(0,bt.kt)("inlineCode",{parentName:"p"},"compare")," fields, however we can also define types such as ",(0,bt.kt)("inlineCode",{parentName:"p"},"int list")," to be instances of ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED"),":"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"structure IntListOrder : ORDERED =\nstruct\n    type t = int list\n    fun compare [] [] = EQUAL\n      | compare [] ys = LESS\n      | compare xs [] = GREATER\n      | compare (x::xs) (y::ys) =\n        case Int.compare (x, y) of\n            EQUAL => compare xs ys\n          | LESS => LESS\n          | GREATER => GREATER\nend\n")),(0,bt.kt)("p",null,"This structure defines a ",(0,bt.kt)("em",{parentName:"p"},"lexicographic ordering")," on int lists, using the fact that values of type ",(0,bt.kt)("inlineCode",{parentName:"p"},"int")," are already ordered. It prioritizes the relative comparison of the corresponding elements of both lists first, and then the length (akin to how a dictionary is ordered)."),(0,bt.kt)("p",null,"Indeed, we can take this one step further and see that lexicographic orderings form a ",(0,bt.kt)("em",{parentName:"p"},"functor"),", in that we can parameterize the ordering of some type of list, given that we can order the elements of the list. Like a higher-order function, this saves us from having to repeat the same code over and over to declare ",(0,bt.kt)("inlineCode",{parentName:"p"},"StringListOrder")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"CharListOrder")," structures, instead encapsulating the common pattern. We can implement the ",(0,bt.kt)("inlineCode",{parentName:"p"},"LexicListOrder")," functor as follows:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"functor LexicListOrder (O : ORDERED) : ORDERED =\nstruct\n    type t = O.t list\n    fun compare [] [] = EQUAL\n      | compare [] ys = LESS\n      | compare xs [] = GREATER\n      | compare (x::xs) (y::ys) =\n        case O.compare (x, y) of\n            EQUAL => compare xs ys\n          | LESS => LESS\n          | GREATER => GREATER\nend\n")),(0,bt.kt)("p",null,"Note that since an instantiation of the ",(0,bt.kt)("inlineCode",{parentName:"p"},"LexicListOrder")," functor is itself a structure ascribing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED"),', it can be "passed in" as input to ',(0,bt.kt)("em",{parentName:"p"},"itself"),", resulting in ",(0,bt.kt)("em",{parentName:"p"},"any")," type of nested list being an instance of ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED"),", so long as the base type is also an instance of ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED"),"."),(0,bt.kt)("p",null,"It is also useful to note that ",(0,bt.kt)("em",{parentName:"p"},"equality types")," in Standard ML are essentially a language-supported typeclass, akin to inbuilt support for the following signature:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"signature EQ =\nsig\n    type t\n    val equal : t * t -> bool\nend\n")),(0,bt.kt)("p",null,"The operations for ",(0,bt.kt)("inlineCode",{parentName:"p"},"equal"),' for each "instance" of the typeclass are instead defined by Standard ML itself, and not user-defined. Thus, we can think of the equality operator ',(0,bt.kt)("inlineCode",{parentName:"p"},"=")," as simply invoking the ",(0,bt.kt)("inlineCode",{parentName:"p"},"T.equal")," method for the proper typeclass ",(0,bt.kt)("inlineCode",{parentName:"p"},"T"),", defined by the type that is being compared for equality."),(0,bt.kt)("p",null,"In this next section, we will explore a concrete use for typeclasses when designing functors."),(0,bt.kt)("h2",{id:"case-study-red-black-trees"},"Case study: Red-black trees"),(0,bt.kt)("p",null,"Typeclasses can be important when we are attempting to place some greater constraint on the types that may instantiate some universal type. In certain cases, we do not want the types that we are considering to truly be ",(0,bt.kt)("em",{parentName:"p"},"any")," type, but any of a limited subset of types that share some common characteristic or implement some operation. We will study the use of ",(0,bt.kt)("em",{parentName:"p"},"red-black trees")," as the underlying data structure for dictionaries."),(0,bt.kt)("p",null,"A dictionary is a simple data structure that maps keys to values. Consider its signature given below."),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"signature DICT =\nsig\n    type key\n    type 'a dict\n    val empty : 'a dict\n    val insert : 'a dict -> key * 'a -> 'a dict\n    val lookup : 'a dict -> key -> 'a option\nend\n")),(0,bt.kt)("p",null,"It is a well-known fact that, utilizing a kind of ",(0,bt.kt)("em",{parentName:"p"},"balanced binary tree")," data structure, dictionaries can be implemented with an ",(0,bt.kt)("span",{parentName:"p",className:"math math-inline"},(0,bt.kt)("span",{parentName:"span",className:"katex"},(0,bt.kt)("span",{parentName:"span",className:"katex-mathml"},(0,bt.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,bt.kt)("semantics",{parentName:"math"},(0,bt.kt)("mrow",{parentName:"semantics"},(0,bt.kt)("mi",{parentName:"mrow"},"O"),(0,bt.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,bt.kt)("mi",{parentName:"mrow"},"log"),(0,bt.kt)("mo",{parentName:"mrow"},"\u2061"),(0,bt.kt)("mi",{parentName:"mrow"},"n"),(0,bt.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,bt.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(\\log n)")))),(0,bt.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,bt.kt)("span",{parentName:"span",className:"base"},(0,bt.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,bt.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,bt.kt)("span",{parentName:"span",className:"mopen"},"("),(0,bt.kt)("span",{parentName:"span",className:"mop"},"lo",(0,bt.kt)("span",{parentName:"span",style:{marginRight:"0.01389em"}},"g")),(0,bt.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,bt.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,bt.kt)("span",{parentName:"span",className:"mclose"},")")))))," ",(0,bt.kt)("inlineCode",{parentName:"p"},"insert")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"lookup")," operation, as opposed to ",(0,bt.kt)("span",{parentName:"p",className:"math math-inline"},(0,bt.kt)("span",{parentName:"span",className:"katex"},(0,bt.kt)("span",{parentName:"span",className:"katex-mathml"},(0,bt.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,bt.kt)("semantics",{parentName:"math"},(0,bt.kt)("mrow",{parentName:"semantics"},(0,bt.kt)("mi",{parentName:"mrow"},"O"),(0,bt.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,bt.kt)("mi",{parentName:"mrow"},"n"),(0,bt.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,bt.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,bt.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,bt.kt)("span",{parentName:"span",className:"base"},(0,bt.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,bt.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,bt.kt)("span",{parentName:"span",className:"mopen"},"("),(0,bt.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,bt.kt)("span",{parentName:"span",className:"mclose"},")")))))," for other data structures such as lists. While there are many different implementations of balanced binary trees, we will consider a particular variant known as ",(0,bt.kt)("em",{parentName:"p"},"red-black trees"),"."),(0,bt.kt)("blockquote",null,(0,bt.kt)("p",{parentName:"blockquote"},(0,bt.kt)("strong",{parentName:"p"},"[Red-black tree]"),": A variant of self-balancing binary tree that ensures logarithmic search and insert time. It is named because of its nodes, which are marked as either ",(0,bt.kt)("em",{parentName:"p"},"red")," or ",(0,bt.kt)("em",{parentName:"p"},"black"),". Furthermore, it obeys the following properties:"),(0,bt.kt)("ol",{parentName:"blockquote"},(0,bt.kt)("li",{parentName:"ol"},"All leaves are black."),(0,bt.kt)("li",{parentName:"ol"},"The children of a red node must be black."),(0,bt.kt)("li",{parentName:"ol"},"Any path from a given node to a leaf node must go through the same number of black nodes.")),(0,bt.kt)("p",{parentName:"blockquote"},"Note that as a variant of binary search tree, a red-black tree must also satisfy the invariant that the key stored at a node must be greater than or equal to every key in the left subtree, and less than or equal to every key in the right subtree.")),(0,bt.kt)("p",null,"It is easy to reason about why this schema ensures that we have the proper asymptotic bound for search - the third property in particular ensures that, for any path from the root, the length of the longest path from the root to a leaf is at most twice that of the shortest path. This is because the longest such path you can construct from the root to a leaf (minimizing black nodes) is by alternating black and red nodes."),(0,bt.kt)("p",null,"This means that a given red-black tree is not as strictly balanced as some other variants (for instance, AVL trees), however it is always ",(0,bt.kt)("em",{parentName:"p"},"approximately")," balanced."),(0,bt.kt)("p",null,"We would like to create a structure for red-black tree dictionaries. There are some options that we have - we could simply hard-code a ",(0,bt.kt)("inlineCode",{parentName:"p"},"TypeRedBlackDict :> DICT")," for any type ",(0,bt.kt)("inlineCode",{parentName:"p"},"Type"),", except that this would entail quite a bit of repeated code (and exertion on our part). Another solution would be to make the type of ",(0,bt.kt)("inlineCode",{parentName:"p"},"'a dict")," doubly-polymorphic instead - something like an ",(0,bt.kt)("inlineCode",{parentName:"p"},"('a, 'b) dict"),", where ",(0,bt.kt)("inlineCode",{parentName:"p"},"'a")," is the type of the dict's keys and ",(0,bt.kt)("inlineCode",{parentName:"p"},"'b")," the type of its contents. However, then we lose the guarantee that ",(0,bt.kt)("inlineCode",{parentName:"p"},"'a")," is a type that supports comparison, which means that we cannot satisfy the tree's invariants."),(0,bt.kt)("p",null,"The solution we will turn to is exactly similar to that as discussed in the previous section - we will instead design a ",(0,bt.kt)("inlineCode",{parentName:"p"},"RedBlackDict")," functor that takes in a typeclass implementing ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED"),", and exports a structure whose keys are the type of the given typeclass. We thus will define our functor with the following preliminaries:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"functor RedBlackDict (Key : ORDERED) :> DICT where type key = Key.t =\nstruct\n    type key = Key.t\n    datatype color = Red | Black\n    datatype 'a dict = Leaf | Node of 'a dict * (color * (key * 'a)) * 'a dict\n\n    val empty = Leaf\n    (* ... *)\nend\n")),(0,bt.kt)("p",null,"Because we take as input a ",(0,bt.kt)("inlineCode",{parentName:"p"},"Key")," structure ascribing to ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED"),", we have access to the ",(0,bt.kt)("inlineCode",{parentName:"p"},"Key.compare")," function, which we will use when inserting into our dictionary. We define a ",(0,bt.kt)("inlineCode",{parentName:"p"},"color")," type (which only consists of the constant constructors ",(0,bt.kt)("inlineCode",{parentName:"p"},"Red")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"Black"),") for tagging the nodes of the red-black tree (leaves are considered to be black)."),(0,bt.kt)("blockquote",null,(0,bt.kt)("p",{parentName:"blockquote"},(0,bt.kt)("em",{parentName:"p"},"Note: We use the ",(0,bt.kt)("inlineCode",{parentName:"em"},"where")," syntax to indicate that the ",(0,bt.kt)("inlineCode",{parentName:"em"},"type key")," will be the same as ",(0,bt.kt)("inlineCode",{parentName:"em"},"Key.t")," to the outside world. This is important because our ",(0,bt.kt)("inlineCode",{parentName:"em"},"RedBlackDict")," is opaquely ascribed, meaning that without this syntax, we wouldn't know what the type of ",(0,bt.kt)("inlineCode",{parentName:"em"},"key")," is, and thus could not actually add any keys! While before we avoided using ",(0,bt.kt)("inlineCode",{parentName:"em"},"where")," by just making the ascription transparent, we don't want to do that here, because we don't want the outside world to mess with our red-black tree and potentially mess up the invariant!"))),(0,bt.kt)("p",null,"The question becomes: how should we implement insert? We cannot be so naive as to simply insert as we would in an ordinary binary search tree, as this would quickly cause problems with our invariants. In particular, we must be mindful of the ",(0,bt.kt)("em",{parentName:"p"},"black height")," invariant, saying that all paths to leaves must have the same number of black nodes on them."),(0,bt.kt)("p",null,"The easiest case to tackle for insert is the ",(0,bt.kt)("inlineCode",{parentName:"p"},"Leaf")," case. How should we finish the definition of ",(0,bt.kt)("inlineCode",{parentName:"p"},"fun insert Leaf (k, v) = "),"? Well, clearly we must insert a ",(0,bt.kt)("inlineCode",{parentName:"p"},"Node(Leaf, (c, (k, v)), Leaf)")," for some color ",(0,bt.kt)("inlineCode",{parentName:"p"},"c"),". Note that since a ",(0,bt.kt)("inlineCode",{parentName:"p"},"Leaf")," is considered to be colored black, if we choose ",(0,bt.kt)("inlineCode",{parentName:"p"},"c")," to be ",(0,bt.kt)("inlineCode",{parentName:"p"},"Black"),", we will run into issues with our black height invariant - we have replaced a ",(0,bt.kt)("inlineCode",{parentName:"p"},"Leaf")," (a subtree of black height 1) with a subtree of black height 2! This will disproportionately affect the black height of paths ending in this subtree, thus causing the invariant to be violated."),(0,bt.kt)("p",null,"Thus, the only sensible choice we can commit is to insert as a ",(0,bt.kt)("inlineCode",{parentName:"p"},"Red")," node. The astute reader may see that this will quickly cause issues - we will address this shortly. Thus, we can write"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"fun insert Leaf (k, v) = Node(Leaf, (Red, (k, v)), Leaf)\n  | insert (Node (L, (c', (k', v')), R)) (k, v) = ...\n")),(0,bt.kt)("p",null,"How should we handle the ",(0,bt.kt)("inlineCode",{parentName:"p"},"Node")," case? Well, insertion really only happens at the leaves - the only thing that we can do at a ",(0,bt.kt)("inlineCode",{parentName:"p"},"Node"),' is to propagate the change throughout the tree until it gets to where it needs to be. We have seen that this schema of an "always-red" insertion maintains the black-height invariant, however there is the ',(0,bt.kt)("em",{parentName:"p"},"red-children")," invariant as well - the children of a red node must themselves be red. This invariant is the one that we are not respecting, with our current schema."),(0,bt.kt)("p",null,'So we only run into an issue when we insert into the tree such that the new node is the child of a red node. Furthermore, we know that, if the tree that we are inserting into is truly a red-black tree, it must respect the red-children invariant, and thus the the parent of the inserted node must itself have a black parent. Thus, there can only be four cases for the "site" of the insertion:'),(0,bt.kt)(xt.B,{figure:(0,bt.kt)(Ct,{mdxType:"Redblack"}),idx:1,mdxType:"Figure"},'Illustration of the four cases of the red-children invariant being broken following insertion. The inserted nodes are marked with a "plus".'),(0,bt.kt)("p",null,"Such an invariant violation is only a local concern, however. All that is needed in order to restore the invariant is to simple ",(0,bt.kt)("em",{parentName:"p"},"rotate")," the site of violation, and do a simple recoloring. We will illustrate only the first case, and the rest follow similarly. You may verify for yourself that this continues to preserve the ordering and black-height invariants."),(0,bt.kt)(xt.B,{figure:(0,bt.kt)(Un,{mdxType:"Balance"}),idx:2,mdxType:"Figure"},'Illustration of the "balancing" necessary in order to preserve the red-children invariant in Case 1 of Fig. 1.'),(0,bt.kt)("p",null,"We thus write the following function which takes care of all four cases."),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"fun balance (Node(Node(Node(a,(Red,x),b), (Red,y), c), (Black, z), d)) =\n            Node(Node(a,(Black,x),b),  (Red,y), Node(c,(Black,z),d))\n  | balance (Node(a,(Black,x), Node(Node(b,(Red,y),c), (Red, z), d))) =\n            Node(Node(a,(Black,x),b), (Red,y), Node(c,(Black,z), d))\n  | balance (Node(Node(a, (Red,x), Node(b,(Red,y),c)), (Black,z), d)) =\n            Node(Node(a,(Black,x),b), (Red, y), Node(c,(Black,z),d))\n  | balance (Node(a, (Black,x), Node(b, (Red,y), Node(c,(Red,z), d)))) =\n            Node(Node(a,(Black,x),b), (Red,y), Node(c,(Black,z), d))\n  | balance T = T\n")),(0,bt.kt)("p",null,"Note that if we are not in any of the four described cases, ",(0,bt.kt)("inlineCode",{parentName:"p"},"balance")," simply acts as the identity function, as there is no invariant being broken."),(0,bt.kt)("p",null,"However, this rotation may itself cause another site of red-children invariant violation, slightly farther up. As such, we must ",(0,bt.kt)("em",{parentName:"p"},"propagate")," this balancing operation as far up as necessary, in order to produce a proper binary tree at the very end. To this end, we can write the following code for the inductive case of ",(0,bt.kt)("inlineCode",{parentName:"p"},"insert"),":"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"fun insert Leaf (k, v) = Node(Leaf, (Red, (k, v)), Leaf)\n  | insert (Node (L, (c', (k', v')), R)) (k, v) =\n    case Key.compare (k, k') of\n        LESS => balance(Node(insert L (k, v), (c', (k', v')), R))\n      | EQUAL => Node(L, (c', (k, v)), R)\n      | GREATER => balance(Node(L, (c', (k', v')), insert R (k ,v)))\n")),(0,bt.kt)("p",null,"This code ensures that, after descending into a subtree in order to insert the given key and value, a balancing operation is immediately performed once the insertion is complete. This ensures that we have a ",(0,bt.kt)("em",{parentName:"p"},"bottom-up")," propagation of balancings, immediately after completing the insertions. Note that because ",(0,bt.kt)("inlineCode",{parentName:"p"},"balance")," acts as the identity function on anything that does not pattern-match to either of the four cases, we perform only a negligible amount of extra checks at each recursive call, and ultimately are only concerned with those four cases."),(0,bt.kt)("p",null,"However, this code is not complete. There is a minor edge case that remains - what if we are too close to the root for any of the four cases to apply? Our previous analysis relied on the fact that we could assume that the parent of our inserted node was red, and thus had a black parent - what of the case where the parent of the inserted node ",(0,bt.kt)("em",{parentName:"p"},"has no")," parent?"),(0,bt.kt)("p",null,"Consider the case illustrated below:"),(0,bt.kt)(xt.B,{figure:(0,bt.kt)(Oa,{mdxType:"Insert"}),idx:3,mdxType:"Figure"},"Demonstration of potential issues in inserting nodes at the root when lacking a black parent."),(0,bt.kt)("p",null,"As we can see here, our previous reasoning does not catch this red-children violation because it does not conform to our previous cases, by virtue of the inserted node not having a grandfather. This case can ",(0,bt.kt)("em",{parentName:"p"},"only")," happen at the root, however, since that is the only location where that can occur. As a result, the simple solution is to simply make the root of any red-black tree black - it will preserve the black height invariant, but also result in this red-red violation being impossible. We can amend our code as follows:"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"fun insert' Leaf (k, v) = Node(Leaf, (Red, (k, v)), Leaf)\n  | insert' (Node (L, (c', (k', v')), R)) (k, v) =\n    case Key.compare (k, k') of\n        LESS => balance(Node(insert' L (k, v), (c', (k', v')), R))\n      | EQUAL => Node(L, (c', (k, v)), R)\n      | GREATER => balance(Node(L, (c', (k', v')), insert' R (k ,v)))\n\nfun insert T (k, v) =\n    case insert' T (k, v) of\n        Leaf => Leaf\n      | Node (L, (_, (k', v')), R) => Node(L, (Black, (k', v')), R)\n")),(0,bt.kt)("p",null,"Finally, this results in our completed code for the ",(0,bt.kt)("inlineCode",{parentName:"p"},"insert")," function. Note that because of the signature that we are ascribing to, helper functions such as ",(0,bt.kt)("inlineCode",{parentName:"p"},"balance")," and ",(0,bt.kt)("inlineCode",{parentName:"p"},"insert")," will not be visible to the client of the module, so there is no harm in declaring them within the namespace of the functor."),(0,bt.kt)("p",null,"Our completed code for a red-black tree implementation of dictionaries is thus as follows. Note that the implementation of ",(0,bt.kt)("inlineCode",{parentName:"p"},"lookup")," is very straightforward, and"),(0,bt.kt)("pre",null,(0,bt.kt)("code",{parentName:"pre",className:"language-sml"},"functor RedBlackDict (Key : ORDERED) :> DICT where type key = Key.t =\nstruct\n    type key = Key.t\n    datatype color = Red | Black\n    datatype 'a dict = Leaf | Node of 'a dict * (color * (key * 'a)) * 'a dict\n\n    val empty = Leaf\n\n    fun balance (Node(Node(Node(a,(Red,x),b), (Red,y), c), (Black, z), d)) =\n                Node(Node(a,(Black,x),b),  (Red,y), Node(c,(Black,z),d))\n      | balance (Node(a,(Black,x), Node(Node(b,(Red,y),c), (Red, z), d))) =\n                Node(Node(a,(Black,x),b), (Red,y), Node(c,(Black,z), d))\n      | balance (Node(Node(a, (Red,x), Node(b,(Red,y),c)), (Black,z), d)) =\n                Node(Node(a,(Black,x),b), (Red, y), Node(c,(Black,z),d))\n      | balance (Node(a, (Black,x), Node(b, (Red,y), Node(c,(Red,z), d)))) =\n                Node(Node(a,(Black,x),b), (Red,y), Node(c,(Black,z), d))\n      | balance T = T\n\n    fun insert' Leaf (k, v) = Node(Leaf, (Red, (k, v)), Leaf)\n      | insert' (Node (L, (c', (k', v')), R)) (k, v) =\n        case Key.compare (k, k') of\n            LESS => balance(Node(insert' L (k, v), (c', (k', v')), R))\n          | EQUAL => Node(L, (c', (k, v)), R)\n          | GREATER => balance(Node(L, (c', (k', v')), insert' R (k ,v)))\n\n    fun insert T (k, v) =\n        case insert' T (k, v) of\n            Leaf => Leaf\n          | Node (L, (_, (k', v')), R) => Node(L, (Black, (k', v')), R)\n\n    fun lookup Leaf k = NONE\n      | lookup (Node (L, (_, (k', v)), R)) k =\n        case Key.compare (k, k') of\n            LESS => lookup L k\n          | EQUAL => SOME v\n          | GREATER => lookup R k\nend\n")),(0,bt.kt)("p",null,"In the end, usage of modules allows us to write a powerful, parameterized implementation of a dictionary interface, in such a way that we ensure that our ",(0,bt.kt)("em",{parentName:"p"},"representation invariants")," are respected throughout each operation. By making a structure ascribing to the ",(0,bt.kt)("inlineCode",{parentName:"p"},"ORDERED")," typeclass a parameter of the functor ",(0,bt.kt)("inlineCode",{parentName:"p"},"RedBlackDict"),", we allow powerful generality in the type of the key to the dictionary, without having to introduce additional overhead in the functions of the module itself."),(0,bt.kt)("h2",{id:"conclusions"},"Conclusions"),(0,bt.kt)("p",null,"In this chapter, we have seen how functors are a potent tool when structuring our code, that allows us to enforce modularity and implement code reuse ",(0,bt.kt)("em",{parentName:"p"},"within the language itself"),". Functors also form the basis for a kind of ",(0,bt.kt)("em",{parentName:"p"},"higher-order module"),", where we can parameterize the structures we are capable of creating by other structures themselves, resulting in a greater degree of expression and versatility not unlike those of higher-order functions themselves."))}Fa.isMDXComponent=!0}}]);