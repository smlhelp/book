"use strict";(self.webpackChunksmlhelp=self.webpackChunksmlhelp||[]).push([[9169],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4},i="Oh No! The Value Restriction",l={unversionedId:"concepts/beyond/val-restrict",id:"concepts/beyond/val-restrict",title:"Oh No! The Value Restriction",description:"By Thea Brick, January 2023",source:"@site/docs/concepts/beyond/val-restrict.md",sourceDirName:"concepts/beyond",slug:"/concepts/beyond/val-restrict",permalink:"/book/docs/concepts/beyond/val-restrict",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Additional Modules Syntax",permalink:"/book/docs/concepts/beyond/more-syntax"},next:{title:"SML Basics Examples",permalink:"/book/docs/examples/basics"}},s={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"oh-no-the-value-restriction"},"Oh No! The Value Restriction"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"By Thea Brick, January 2023")),(0,a.kt)("p",null,"First lets consider the following declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sml"},"val example = ref NONE\n")),(0,a.kt)("p",null,"We can ask ourselves, what is the type of ",(0,a.kt)("inlineCode",{parentName:"p"},"example"),". Surely it should be\n",(0,a.kt)("inlineCode",{parentName:"p"},"'a option ref"),". Yet this can yield some problems:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sml"},'val () = example := SOME 5\nval () = example := SOME "string"\n')),(0,a.kt)("p",null,"The first line requires that ",(0,a.kt)("inlineCode",{parentName:"p"},"example")," must be ",(0,a.kt)("inlineCode",{parentName:"p"},"int option ref"),", but then the\nsecond line requires that ",(0,a.kt)("inlineCode",{parentName:"p"},"example")," be a ",(0,a.kt)("inlineCode",{parentName:"p"},"string option ref"),". This doesn't work,\n",(0,a.kt)("inlineCode",{parentName:"p"},"example")," cannot be both of these types. So something went wrong when we decided\nthe original type of ",(0,a.kt)("inlineCode",{parentName:"p"},"example"),"."),(0,a.kt)("p",null,'To solve this issue, we can place restrictions on what is allowed to have a\npolymorphic type. Specifically, an declaration can only have a polymorphic type\nvariable if the expression on the right hand side of the declaration is a\n"non-expansive expression," Essentially, what this means is that the expression\non the right hand side must be a value and cannot alter the state (or memory) of\nthe program.'),(0,a.kt)("p",null,"When something is value restricted, this means that we replace it with a unique\ndummy type, so the following example above doesn't work because the definition\nof ",(0,a.kt)("inlineCode",{parentName:"p"},"example")," gets value restricted (since ",(0,a.kt)("inlineCode",{parentName:"p"},"ref NONE")," is expansive, it modifies\nstate). So when we try to assign ",(0,a.kt)("inlineCode",{parentName:"p"},"example")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"SOME 5")," or ",(0,a.kt)("inlineCode",{parentName:"p"},'SOME "string"')," it\ndoesn't work because the dummy type is not a ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," nor a ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,a.kt)("p",null,"Importantly, this still allows us to use most forms of polymorphism:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sml"},"val none : 'a option = NONE\nval id : 'a -> 'a = fn x => x\nval magic : 'a -> 'b = fn _ => raise Fail \"Magic\"\n")),(0,a.kt)("p",null,"Unfortunately, the rules for the value restriction is pretty blunt, thus some\ncompletely fine expressions get value restricted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sml"},"(* should be `'a -> 'a` but isn't since `id id` isn't a value *)\nval id2 = id id\n")),(0,a.kt)("p",null,"Generally, this can be avoided in many cases. If you are working with a function\nthen you can usually wrap it in another function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sml"},"val id2 = fn x => id id x\n")),(0,a.kt)("p",null,"Although if you are working with ",(0,a.kt)("inlineCode",{parentName:"p"},"ref"),"s or other imperative features then be\ncareful, since this could potentially modify behaviour."))}u.isMDXComponent=!0}}]);